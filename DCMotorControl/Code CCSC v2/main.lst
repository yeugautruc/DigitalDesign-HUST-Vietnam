CCS PCM C Compiler, Version 4.105, 44902               21-Oct-13 16:28

               Filename: D:\My Project\Project 1 Dieu Khien Van Toc DC\Code CCSC v2\main.lst

               ROM used: 3924 words (48%)
                         Largest free fragment is 2048
               RAM used: 114 (31%) at main() level
                         151 (41%) worst case
               Stack:    3 worst case (2 in main + 1 for interrupts)

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.6
001A:  GOTO   01D
001B:  BTFSC  0C.6
001C:  GOTO   038
001D:  MOVLW  8C
001E:  MOVWF  04
001F:  BTFSS  00.1
0020:  GOTO   023
0021:  BTFSC  0C.1
0022:  GOTO   03B
0023:  BTFSS  0B.5
0024:  GOTO   027
0025:  BTFSC  0B.2
0026:  GOTO   03E
0027:  MOVF   22,W
0028:  MOVWF  04
0029:  MOVF   23,W
002A:  MOVWF  77
002B:  MOVF   24,W
002C:  MOVWF  78
002D:  MOVF   25,W
002E:  MOVWF  79
002F:  MOVF   26,W
0030:  MOVWF  7A
0031:  MOVF   20,W
0032:  MOVWF  0A
0033:  SWAPF  21,W
0034:  MOVWF  03
0035:  SWAPF  7F,F
0036:  SWAPF  7F,W
0037:  RETFIE
0038:  BCF    0A.3
0039:  BCF    0A.4
003A:  GOTO   063
003B:  BCF    0A.3
003C:  BCF    0A.4
003D:  GOTO   06B
003E:  BCF    0A.3
003F:  BCF    0A.4
0040:  GOTO   050
.................... /* Code project 1 Dieu khien van toc DC 
.................... Code viet bang CCSC ver4.105 
.................... Chinh sua lan cuoi vao 21/10/2013 
.................... //--------------------------------------- 
.................... system source mangagement:dung de quan ly tai nguyen 
.................... system tick Timer0=1.6ms; 
.................... Stage 1: Default 
....................    Hien thi toc do do duoc.Quet nut bam. Nhap nhay Led. 
....................    Tu dong vao stage 1 sau khi khoi tao. Vao stage 1 khi bam button run tu stage 4, khi so vong quay yeu cau =0. 
....................    Bam button dat toc do de chuyen sang stage 2. Bam button dat so vong de chuyen sang stage 3. 
.................... //----------------------------------------- 
.................... task 1: nhap nhay led 
....................    pin RA4;timer0 
....................    piority 3 
.................... task 2: Quet 7seg 4digit 
....................    PORTB;RD4-RD7; 
....................    piority 3 
.................... task 3: quet nut bam 
....................    pin RA1,RA2,RA3; 
....................    piority 3 
.................... task 4:do toc do dong co 
....................    dem so xung trong 163,8ms de tinh van toc 
....................    timer0;counter1;;pin RC0(Counter),  
....................    piority 4 
....................     
.................... */ 
.................... #include "main.h" 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device *=16 
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES HS                    	//High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES PUT                   	//Power Up Timer 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOWRT                 	//Program memory not write protected 
.................... #FUSES RESERVED              	//Used to set the reserved FUSE bits 
....................  
.................... #use delay(clock=20000000,RESTART_WDT) 
*
0095:  MOVLW  BB
0096:  MOVWF  04
0097:  BCF    03.7
0098:  MOVF   00,W
0099:  BTFSC  03.2
009A:  GOTO   0AC
009B:  MOVLW  06
009C:  MOVWF  78
009D:  MOVLW  BF
009E:  MOVWF  77
009F:  CLRWDT
00A0:  DECFSZ 77,F
00A1:  GOTO   09F
00A2:  DECFSZ 78,F
00A3:  GOTO   09D
00A4:  MOVLW  7A
00A5:  MOVWF  77
00A6:  DECFSZ 77,F
00A7:  GOTO   0A6
00A8:  GOTO   0A9
00A9:  CLRWDT
00AA:  DECFSZ 00,F
00AB:  GOTO   09B
00AC:  BSF    0A.3
00AD:  BCF    0A.4
00AE:  GOTO   084 (RETURN)
....................  
....................  
.................... #include "PIC16F877A_CCS_C.H" 
....................  
.................... // register definitions 
....................  
.................... #define W 0 
.................... #define F 1 
....................  
.................... // register files 
.................... #byte INDF          =0x00 
.................... #byte TMR0          =0x01 
.................... #byte PCL           =0x02 
.................... #byte STATUS        =0x03 
.................... #byte FSR           =0x04 
.................... #byte PORTA         =0x05 
.................... #byte PORTB         =0x06 
.................... #byte PORTC         =0x07 
.................... #byte PORTD         =0x08 
.................... #byte PORTE         =0x09 
....................  
.................... #byte EEDATA        =0x10C 
.................... #byte EEADR         =0x10D 
.................... #byte EEDATH        =0x10E 
.................... #byte EEADRH         =0x10F 
....................  
....................  
....................  
.................... #byte PCLATH        =0x0a 
....................  
.................... //interrupt 
....................  
.................... #byte PIR2    =0x0d 
.................... #byte PIE2    =0x8d 
.................... // INTCON Bits for C 
.................... #byte INTCON      =0x0b 
.................... #bit  GIE         = 0x0b.7 
.................... #bit  PEIE        = 0x0b.6 
.................... #bit  tmr0ie      = 0x0b.5 
.................... #bit  inte        = 0x0b.4 
.................... #bit  rbie        = 0x0b.3 
.................... #bit  tmr0if      = 0x0b.2 
.................... #bit  INTF        = 0x0b.1 
.................... #bit  rbif        = 0x0b.0 
.................... // PIR1 for C 
.................... #byte PIR1    =0x0c 
.................... #bit pspif  = 0x0c.7 
.................... #bit adif    = 0x0c.6 
.................... #bit RCIF    = 0x0c.5 
.................... #bit txif    = 0x0c.4 
.................... #bit sspif    = 0x0c.3 
.................... #bit ccp1if    = 0x0c.2 
.................... #bit tmr2if    = 0x0c.1 
.................... #bit tmr1if    = 0x0c.0 
.................... // PIE1 for C 
.................... #byte PIE1    =0x8c 
.................... #bit adie    = 0x8c.6 
.................... #bit RCIE    = 0x8c.5 
.................... #bit TXIE    = 0x8c.4 
.................... #bit sspie    = 0x8c.3 
.................... #bit ccp1ie    = 0x8c.2 
.................... #bit tmr2ie    = 0x8c.1 
.................... #bit tmr1ie    = 0x8c.0 
.................... //PIR2 for C 
.................... #bit cmif    = 0x0d.6 
.................... #bit eeif    = 0x0d.4 
.................... #bit bclif  = 0x0d.3 
.................... #bit ccp2if    = 0x0d.0 
.................... //PIE2 for C 
.................... #bit osfie    = 0x8d.7 
.................... #bit cmie    = 0x8d.6 
.................... #bit eeie   = 0x8d.4 
.................... // 
.................... #byte OPTION_REG    =0x81 
.................... #byte TRISA         =0x85 
.................... #byte TRISB         =0x86 
.................... #byte TRISC         =0x87 
.................... #byte TRISD         =0x88 
.................... #byte TRISE         =0x89 
....................  
.................... //USART 
.................... #byte TXSTA  =0x98 
.................... #bit TRMT    =0x98.1 
.................... #bit BRGH    =0x98.2 
.................... #bit SYNC    =0x98.4//USART mode select bit =1: Synchronous. =0 Asynchronous 
.................... #bit TXEN    =0x98.5 
.................... #bit TX9    =0x98.6//9 bit enable bit 
.................... #byte SPBRG  =0x99 
.................... #byte RCSTA  =0x18 
.................... #bit SPEN =0x18.7 
.................... #bit RX9 =0x18.6 
.................... #bit CREN =0x18.4 
.................... #bit FERR =0x18.2 
.................... #bit OERR =0x18.1 
.................... #byte TXREG  =0x19 
.................... #byte   RCREG =0x1A 
.................... //Capture/compare/pwm 
.................... #byte CCP1CON =0x17 
.................... #bit  CCP1X       =0x17.5 
.................... #bit  CCP1Y       =0x17.4 
.................... #bit  CCP1M3      =0x17.3 
.................... #bit  CCP1M2      =0x17.2 
.................... #bit  CCP1M1      =0x17.1 
.................... #bit  CCP1M0      =0x17.0 
.................... #byte CCPR1H  =0x16 
.................... #byte CCPR1L  =0x15 
.................... #byte CCP2CON =0x1d 
.................... #byte CCPR2H  =0x1c 
.................... #byte CCPR2L  =0x1b 
....................  
.................... //Timer 1 
.................... #byte T1CON       =0x10 
.................... #bit T1CKPS1      =0x10.5 
.................... #bit T1CKPS0      =0x10.4 
.................... #bit T1OSCEN      =0x10.3 
.................... #bit T1SYNC_NOT   =0x10.2 
.................... #bit TMR1CS       =0x10.1 
.................... #bit tmr1on       =0x10.0 
....................  
.................... #byte TMR1L       =0x0e 
.................... #byte TMR1H       =0x0f 
....................  
.................... #byte EECON1        =0x18C 
.................... #byte EECON2        =0x18D 
.................... //Timer 2 
.................... #byte T2CON          =0x12 
.................... #bit  TMR2ON         =0x12.2 
.................... #bit  T2CKPS1        =0x12.1 
.................... #bit  T2CKPS0        =0x12.0 
.................... #byte PR2            =0x92 
.................... //DINH NGHIA BIT 
.................... #bit RA5   =0x05.5 
.................... #bit RA4   =0x05.4 
.................... #bit RA3   =0x05.3 
.................... #bit RA2   =0x05.2 
.................... #bit RA1   =0x05.1 
.................... #bit RA0   =0x05.0 
....................  
.................... #bit RB7   =0x06.7 
.................... #bit RB6   =0x06.6 
.................... #bit RB5   =0x06.5 
.................... #bit RB4   =0x06.4 
.................... #bit RB3   =0x06.3 
.................... #bit RB2   =0x06.2 
.................... #bit RB1   =0x06.1 
.................... #bit RB0   =0x06.0 
....................  
.................... #bit RC7   =0x07.7 
.................... #bit RC6   =0x07.6 
.................... #bit RC5   =0x07.5 
.................... #bit RC4   =0x07.4 
.................... #bit RC3   =0x07.3 
.................... #bit RC2   =0x07.2 
.................... #bit RC1   =0x07.1 
.................... #bit RC0   =0x07.0 
....................  
.................... #bit RD7   =0x08.7 
.................... #bit RD6   =0x08.6 
.................... #bit RD5   =0x08.5 
.................... #bit RD4   =0x08.4 
.................... #bit RD3   =0x08.3 
.................... #bit RD2   =0x08.2 
.................... #bit RD1   =0x08.1 
.................... #bit RD0   =0x08.0 
....................  
.................... #bit RE2   =0x09.2 
.................... #bit RE1   =0x09.1 
.................... #bit RE0   =0x09.0 
....................  
....................  
.................... #bit TRISA5   =0x85.5 
.................... #bit TRISA4   =0x85.4 
.................... #bit TRISA3   =0x85.3 
.................... #bit TRISA2   =0x85.2 
.................... #bit TRISA1   =0x85.1 
.................... #bit TRISA0   =0x85.0 
....................  
.................... #bit TRISB7   =0x86.7 
.................... #bit TRISB6   =0x86.6 
.................... #bit TRISB5   =0x86.5 
.................... #bit TRISB4   =0x86.4 
.................... #bit TRISB3   =0x86.3 
.................... #bit TRISB2   =0x86.2 
.................... #bit TRISB1   =0x86.1 
.................... #bit TRISB0   =0x86.0 
....................  
.................... #bit TRISC7   =0x87.7 
.................... #bit TRISC6   =0x87.6 
.................... #bit TRISC5   =0x87.5 
.................... #bit TRISC4   =0x87.4 
.................... #bit TRISC3   =0x87.3 
.................... #bit TRISC2   =0x87.2 
.................... #bit TRISC1   =0x87.1 
.................... #bit TRISC0   =0x87.0 
....................  
.................... #bit TRISD7   =0x88.7 
.................... #bit TRISD6   =0x88.6 
.................... #bit TRISD5   =0x88.5 
.................... #bit TRISD4   =0x88.4 
.................... #bit TRISD3   =0x88.3 
.................... #bit TRISD2   =0x88.2 
.................... #bit TRISD1   =0x88.1 
.................... #bit TRISD0   =0x88.0 
....................  
.................... #bit TRISE2   =0x89.2 
.................... #bit TRISE1   =0x89.1 
.................... #bit TRISE0   =0x89.0 
.................... // OPTION Bits 
.................... #bit RBPU_NOT   = 0x81.7 
.................... #bit intedg     = 0x81.6 
.................... #bit T0CS       = 0x81.5 
.................... #bit t0se       = 0x81.4 
.................... #bit PSA        = 0x81.3 
.................... #bit PS2        = 0x81.2 
.................... #bit PS1        = 0x81.1 
.................... #bit PS0        = 0x81.0 
....................  
.................... // EECON1 Bits 
.................... #bit eepgd   = 0x18c.7 
.................... #bit free      = 0x18C.4 
.................... #bit wrerr     = 0x18C.3 
.................... #bit wren       = 0x18C.2 
.................... #bit wr         = 0x18C.1 
.................... #bit rd         = 0x18C.0 
....................  
.................... //ADCON0 
.................... #byte ADCON0      =0x1F 
.................... #bit  ADON        =0x1F.0  
.................... #bit  ADC_GO      =0x1F.2 
.................... #bit  CHS0        =0x1F.3 
.................... #bit  CHS1        =0x1F.4 
.................... #bit  CHS2        =0x1F.5 
.................... #bit  ADCS0       =0x1F.6 
.................... #bit  ADCS1       =0x1F.7 
....................  
.................... //ADCON1 
.................... #byte ADCON1      =0x9F 
.................... #bit  ADFM        =0x9F.7 
.................... #bit  ADCS2       =0x9F.6 
.................... #bit  PCFG3       =0x9F.3 
.................... #bit  PCFG2       =0x9F.2 
.................... #bit  PCFG1       =0x9F.1 
.................... #bit  PCFG0       =0x9F.0 
.................... #byte ADRESH      =0x1E 
.................... #byte ADRESL      =0x9E 
....................  
.................... //SPI register 
.................... #byte SSPSTAT =0x94 
.................... #bit SMP=0x94.7 
.................... #bit CKE=0x94.6 
.................... #bit DA_SPI=0x94.5 
.................... #bit P_SPI=0x94.4 
.................... #bit S_SPI=0x94.3 
.................... #bit RW_SPI=0x94.2 
.................... #bit UA_SPI=0x94.1 
.................... #bit BF__SPI=0x94.0 
....................  
.................... #byte SSPCON1=0x14 
.................... #bit WCOL=0x14.7 
.................... #bit SSPOV=0x14.6 
.................... #bit SSPEN=0x14.5 
.................... #bit CKP=0x14.4 
.................... #bit SSPM3=0x14.3 
.................... #bit SSPM2=0x14.2 
.................... #bit SSPM1=0x14.1 
.................... #bit SSPM0=0x14.0 
....................  
.................... #byte SSPBUF=0x13 
.................... //Comparator modul 
.................... #byte CMCON    = 0x9C 
.................... #bit C2OUT     = 0x9C.7 
.................... #bit C1OUT     = 0x9C.6 
.................... #bit C2INV     =0x9C.5 
.................... #bit C1INV     =0x9C.4 
.................... #bit CM2       = 0x9C.2 
.................... #bit CM1       = 0x9C.1 
.................... #bit CM0       = 0x9C.0 
....................  
....................  
.................... #include "pic16f877a_function.h" 
.................... #define Led             RA4 
.................... #define Led_TRIS        TRISA4 
.................... #define _7seg_Port      PORTB 
.................... #define _7seg_TRIS      TRISB 
.................... #define digit1          RD7 
.................... #define digit1_TRIS     TRISD7 
.................... #define digit2          RD6 
.................... #define digit2_TRIS     TRISD6 
.................... #define digit3          RD5 
.................... #define digit3_TRIS     TRISD5 
.................... #define digit4          RD4 
.................... #define digit4_TRIS     TRISD4 
.................... #define Led_Run               RD3 
.................... #define Led_Run_TRIS          TRISD3 
.................... #define Led_Speed_Set         RD2 
.................... #define Led_Speed_Set_TRIS    TRISD2 
.................... #define Led_Rev_Set           RD1 
.................... #define Led_Rev_Set_TRIS      TRISD1 
.................... #define Counter_Pin           RC0 
.................... #define Counter_TRIS          TRISC0 
.................... #define PWM_Pin               RC2 
.................... #define PWM_TRIS              TRISC2 
.................... #define SDI RC4 
.................... #define SDO RC5 
.................... #define SCK RC3 
.................... #define SS  RA5 
.................... //---------------------------------------------- 
.................... #define PPR             32//pulse per revolution 
.................... #define Enable_PWM_Modul()   {CCP1M3=1;CCP1M2=1;TMR2ON=1;} 
.................... #define Disable_PWM_Modul()   {CCP1M3=0;CCP1M2=0;TMR2ON=0;} 
.................... //------------------------------------------------------------------- 
.................... void init(void); 
.................... void RS232_init(void); 
.................... unsigned char RS232_transmit(unsigned char c); 
.................... unsigned char RS232_receive(unsigned char *pointer); 
.................... void ADC_init(void); 
.................... void Comparator_init (void); 
.................... void SPI_init(void); 
.................... void Timer1_Init(void); 
.................... void Timer2_Init(void); 
.................... void CCP_Init(void); 
....................  
.................... #include "pic16f877a_function.c" 
.................... //#include "PIC16F877A_CCS_C.H"//include if use CCS C 
.................... //#include "pic16f877a_function.h" 
....................  
....................  
.................... //------------------------------- 
.................... void init(void){ 
....................    LED_TRIS=0; 
*
0070:  BSF    03.5
0071:  BCF    05.4
....................    //TRISA0=1;TRISA1=1;TRISA2=1;TRISA3=1; 
....................    _7seg_TRIS=0; 
0072:  CLRF   06
....................    digit1_TRIS=0;digit2_TRIS=0;digit3_TRIS=0;digit4_TRIS=0; 
0073:  BCF    08.7
0074:  BCF    08.6
0075:  BCF    08.5
0076:  BCF    08.4
....................    Led_Run_TRIS=0;Led_Speed_Set_TRIS=0;Led_Rev_Set_TRIS=0; 
0077:  BCF    08.3
0078:  BCF    08.2
0079:  BCF    08.1
....................    Counter_TRIS=1;PWM_TRIS=0;PWM_pin=1; 
007A:  BSF    07.0
007B:  BCF    07.2
007C:  BCF    03.5
007D:  BSF    07.2
....................    //RBPU_NOT=0;//port B pull up. auto disable when configure as output 
....................     
....................     
....................    //TMR1IE=1;//enable tmier1 interrupt 
....................    // 
....................    TMR0IE=1;//enable timer0 interrupt 
007E:  BSF    0B.5
....................    T0CS=0;//timer0 use internal clock 
007F:  BSF    03.5
0080:  BCF    01.5
....................    PSA=0;//prescaler is assigned to the timer0 
0081:  BCF    01.3
....................    PS2=1; 
0082:  BSF    01.2
....................    PS1=0; 
0083:  BCF    01.1
....................    PS0=0;//scale 1:32->1638.4us thi ngat 
0084:  BCF    01.0
....................     
....................     //INTEDG=1;//RB0 interrupt on rising edge 
....................    //INTE=1;//enable RB0 interrupt 
....................    //TRISB0=1; 
....................    GIE=1;//enable global interrupt 
0085:  BCF    03.5
0086:  BSF    0B.7
....................    PEIE=1;//enable peripheral interrupt 
0087:  BSF    0B.6
.................... } 
0088:  BSF    0A.3
0089:  BCF    0A.4
008A:  GOTO   078 (RETURN)
.................... //----------------------------------------- 
.................... void ADC_init(void){ 
....................    // delay min 20us when change adc channel 
....................    ADIE=0;//interrupt disable 
*
00BB:  BSF    03.5
00BC:  BCF    0C.6
....................    ADFM=1;//6 most signification bit of ADRESH=0 
00BD:  BSF    1F.7
....................    TRISA0=1; 
00BE:  BSF    05.0
....................    //TRISA1=1; 
....................    //TRISA3=1; 
....................    ADCS2=1; 
00BF:  BSF    1F.6
....................    ADCS1=1; 
00C0:  BCF    03.5
00C1:  BSF    1F.7
....................    ADCS0=0;//Tad=64Tosc=3.2us. Have to delay 38.4us to finish adc conversion 
00C2:  BCF    1F.6
....................    PCFG3=1; 
00C3:  BSF    03.5
00C4:  BSF    1F.3
....................    PCFG2=1; 
00C5:  BSF    1F.2
....................    PCFG1=1; 
00C6:  BSF    1F.1
....................    PCFG0=0;//RA0; 
00C7:  BCF    1F.0
....................    ADON=1;//power up adc modul 
00C8:  BCF    03.5
00C9:  BSF    1F.0
....................    CHS2=0;CHS1=0;CHS0=0;//select channel 0 
00CA:  BCF    1F.5
00CB:  BCF    1F.4
00CC:  BCF    1F.3
.................... } 
00CD:  BSF    0A.3
00CE:  BCF    0A.4
00CF:  GOTO   091 (RETURN)
.................... /*name: void RS232_init(void) 
....................   khoi tao thong so cho RS232 
.................... */ 
.................... void RS232_init(void){ 
....................    // 
....................    BRGH=1;//high baud rate generator 
....................    SPBRG=129;//or 25:baud rate 9.6K 
....................     SYNC=0;//asynchronous 
....................    SPEN=1;//serial port enable. Tx<RC6>;Rx<RC7> will be configured auto 
....................    // 
....................    //CREN=1;//enable receiver 
....................    //RCIE=1;//enable ceceiver interrupt 
....................   // RX9=0;//8 bit receive 
....................    // 
....................    TXIE=0;//disable interrupt 
....................    TX9=0;//8 bit trans 
....................    TXEN=1;//enable transmit. tramsmit occur when load TXREG register. TXIF is set 
....................    GIE=1;//enable global interrupt 
....................    PEIE=1;//enable peripheral interrupt 
....................    TRISC6=0; 
....................    TRISC7=1; 
.................... } 
....................  
.................... /*name: unsigned char RS232_transmit(unsigned char c) 
....................   ghi ky tu de truyen RS232. Neu ghi thanh cong tra ve 1. ghi ko thanh cong tra ve 0 
....................   */ 
.................... unsigned char RS232_transmit(unsigned char c){ 
....................    if(TXIF==1){//TXIF only be cleared when TXREG if full 
....................       TXREG=c;//load register. transmit occur. TXIF will be clear. 
....................       return 1; 
....................    }else 
....................       return 0; 
.................... } 
.................... /*name: unsigned char RS232_receive(unsigned char *pointer) 
....................   tra ve error code. doc ky tu nhan duoc tu rs232 ghi vao bien con tro pointer. 
.................... */ 
.................... unsigned char RS232_receive(unsigned char *pointer){ 
....................    if((OERR==0)&&(FERR==0)){//no error 
....................       *pointer=RCREG;//RCREG can contain 2 byte. RCIF is cleared when RCREG is empty 
....................       return 0;//error code =0: no error 
....................    } 
....................    if((OERR==1)&&(FERR==0)){//over run error: RCREG is full, byte in RSR will be lost 
....................       *pointer=RCREG;//RCREG can contain 2 byte. RCIF is cleared when RCREG is empty 
....................       return 1;//error code =1 
....................    } 
....................    if((OERR==0)&&(FERR==1)){//frame error bit: must be check b4 reading RCREG 
....................       *pointer=RCREG;//RCREG can contain 2 byte. RCIF is cleared when RCREG is empty 
....................       return 2;//error code =2 
....................    } 
....................    if((OERR==1)&&(FERR==1)){// 
....................       *pointer=RCREG;//RCREG can contain 2 byte. RCIF is cleared when RCREG is empty 
....................       return 3;//error code =3 
....................    } 
.................... } 
.................... //----------------------------------------------------------------- 
.................... // 
.................... void SPI_init(void){ 
....................    TRISC3=1;//SCK 
....................    TRISC4=1;//SDI 
....................    TRISC5=0;//SDO 
....................    TRISA5=0;//SS 
....................     
....................    CKP=1;//idle state of clock is high level 
....................    CKE=0;//transmit occur when idle to active 
....................    SMP=0;//disable in slave mode 
....................    SSPM3=0;SSPM2=1;SSPM1=0;SSPM0=1;//slave mode, SS disable, SS pin use as IO 
....................    SSPIE=0;//disable interrupt 
....................    SSPEN=1;//enable and configure pin for SPI 
....................    TRISA5=0;//SS 
....................    SS=1; 
.................... } 
.................... //---------------------------------------------------------------------------- 
....................  
.................... void Comparator_init(void){ 
....................    //respond time max 10us 
....................    TRISA0=1; 
....................    TRISA1=1; 
....................    TRISA3=1; 
....................    CM2=1; 
....................    CM1=0; 
....................    CM0=0; 
....................    C1INV=0; 
....................    C2INV=0;//no inversion output 
....................    CMIE=1;//interrupt enable 
....................     
.................... } 
.................... //------------------------------------------------------------------------------ 
.................... void Timer1_Init(void){ 
....................    // 
....................    TMR1CS=1;//timer1 external clock (counter).Rasing edge.Must have falling edge fist 
*
00AF:  BSF    10.1
....................    //TMR1CS=0;//timer1 internal clock  
....................    T1CKPS1=0; 
00B0:  BCF    10.5
....................    T1CKPS0=0;//scale 1:1 
00B1:  BCF    10.4
....................    T1OSCEN=0;//Timer1 Oscillator Disable. Counter rasing on pin RC0  
00B2:  BCF    10.3
....................    T1SYNC_NOT=0;//Synchronize external clock 
00B3:  BCF    10.2
....................    TMR1IE=0;//disable interrupt on timer 1 
00B4:  BSF    03.5
00B5:  BCF    0C.0
....................    TMR1IF=0;//clear interrupt flag 
00B6:  BCF    03.5
00B7:  BCF    0C.0
....................    //TMR1H=0;TMR1L=0; 
....................    //TMR1ON=1;//run timer1; 
.................... } 
00B8:  BSF    0A.3
00B9:  BCF    0A.4
00BA:  GOTO   08E (RETURN)
.................... void Timer2_Init(void){ 
....................     
....................  
.................... } 
....................  
.................... void CCP_Init(void){ 
....................    //CCP1M3=1;CCP1M2=1;//PWM mode. 10bit resolution 
....................    T2CKPS1=0;T2CKPS0=1;//timer 2 prescale 1:1 
*
008B:  BCF    12.1
008C:  BSF    12.0
....................    PR2=0xFF;//19,53KHz 
008D:  MOVLW  FF
008E:  BSF    03.5
008F:  MOVWF  12
....................    Disable_PWM_Modul(); 
0090:  BCF    03.5
0091:  BCF    17.3
0092:  BCF    17.2
0093:  BCF    12.2
....................    //TMR2ON=0;//stop timer 2 
....................    //TMR2IE=1; 
.................... } 
0094:  RETURN
....................  
.................... #include <system.c> 
.................... #include "system.h" 
.................... //Bien quan ly trang thai cac task 
.................... struct Task_ID_Type{ 
....................    unsigned char Number; 
....................    unsigned char Piority;//0:disable;1:task temp;2:back ground task. 
....................    unsigned char Step; 
.................... }; 
.................... struct Task_ID_Type Task_Array[5];//mang luu cac task de schedule 
.................... struct Task_ID_Type Task_OS_temp={0,1,1}; 
*
0850:  BCF    03.5
0851:  CLRF   36
0852:  MOVLW  01
0853:  MOVWF  37
0854:  MOVWF  38
....................  
....................  
.................... /*name: unsinged char select_task(unsigned char) 
....................    tra ve stt cua task phu hop. dau vao la so luong task tinh task OS_temp 
.................... */ 
.................... unsigned char select_task(unsigned char j){ 
*
00F7:  MOVF   39,W
00F8:  BSF    03.5
00F9:  MOVWF  3C
00FA:  BCF    03.5
00FB:  MOVF   39,W
00FC:  BSF    03.5
00FD:  MOVWF  3D
....................    unsigned char i; 
....................    static unsigned char Last_Stt_Task=0; 
....................    unsigned char temp=Last_Stt_Task; 
....................    unsigned char temp2=Last_Stt_Task; 
....................    for(i=0;i<j;i++){//quet 1 vong. chon ra task co piority cao hon task truoc gan vao temp2. 
00FE:  CLRF   3B
00FF:  MOVF   3A,W
0100:  SUBWF  3B,W
0101:  BTFSC  03.0
0102:  GOTO   14A
....................       temp++; if(temp>=j) temp=0; 
0103:  INCF   3C,F
0104:  MOVF   3A,W
0105:  SUBWF  3C,W
0106:  BTFSC  03.0
0107:  CLRF   3C
....................       if(Task_Array[Last_Stt_Task].Piority<Task_Array[temp].Piority){ 
0108:  BCF    03.5
0109:  MOVF   39,W
010A:  BSF    03.5
010B:  MOVWF  3F
010C:  MOVLW  03
010D:  MOVWF  40
010E:  BCF    03.5
010F:  CALL   0D0
0110:  MOVLW  01
0111:  ADDWF  78,W
0112:  ADDLW  27
0113:  MOVWF  04
0114:  BCF    03.7
0115:  MOVF   00,W
0116:  BSF    03.5
0117:  MOVWF  3E
0118:  MOVF   3C,W
0119:  MOVWF  3F
011A:  MOVLW  03
011B:  MOVWF  40
011C:  BCF    03.5
011D:  CALL   0D0
011E:  MOVLW  01
011F:  ADDWF  78,W
0120:  ADDLW  27
0121:  MOVWF  04
0122:  BCF    03.7
0123:  MOVF   00,W
0124:  BSF    03.5
0125:  SUBWF  3E,W
0126:  BTFSC  03.0
0127:  GOTO   148
....................          if(Task_Array[temp2].Piority<Task_Array[temp].Piority) temp2=temp; 
0128:  MOVF   3D,W
0129:  MOVWF  3F
012A:  MOVLW  03
012B:  MOVWF  40
012C:  BCF    03.5
012D:  CALL   0D0
012E:  MOVLW  01
012F:  ADDWF  78,W
0130:  ADDLW  27
0131:  MOVWF  04
0132:  BCF    03.7
0133:  MOVF   00,W
0134:  BSF    03.5
0135:  MOVWF  3E
0136:  MOVF   3C,W
0137:  MOVWF  3F
0138:  MOVLW  03
0139:  MOVWF  40
013A:  BCF    03.5
013B:  CALL   0D0
013C:  MOVLW  01
013D:  ADDWF  78,W
013E:  ADDLW  27
013F:  MOVWF  04
0140:  BCF    03.7
0141:  MOVF   00,W
0142:  BSF    03.5
0143:  SUBWF  3E,W
0144:  BTFSC  03.0
0145:  GOTO   148
0146:  MOVF   3C,W
0147:  MOVWF  3D
....................       } 
....................    } 
0148:  INCF   3B,F
0149:  GOTO   0FF
....................    if(temp2!=Last_Stt_Task){//neu co task cao hon task truoc thi tra ve task cao hon 
014A:  BCF    03.5
014B:  MOVF   39,W
014C:  BSF    03.5
014D:  SUBWF  3D,W
014E:  BTFSC  03.2
014F:  GOTO   157
....................       Last_Stt_Task=temp2;return Last_Stt_Task; 
0150:  MOVF   3D,W
0151:  BCF    03.5
0152:  MOVWF  39
0153:  MOVWF  78
0154:  GOTO   18C
....................    }else{ 
0155:  GOTO   18A
0156:  BSF    03.5
....................       for(i=0;i<j;i++){ 
0157:  CLRF   3B
0158:  MOVF   3A,W
0159:  SUBWF  3B,W
015A:  BTFSC  03.0
015B:  GOTO   189
....................          temp++; if(temp>=j) temp=0; 
015C:  INCF   3C,F
015D:  MOVF   3A,W
015E:  SUBWF  3C,W
015F:  BTFSC  03.0
0160:  CLRF   3C
....................          if(Task_Array[Last_Stt_Task].Piority==Task_Array[temp].Piority){ 
0161:  BCF    03.5
0162:  MOVF   39,W
0163:  BSF    03.5
0164:  MOVWF  3F
0165:  MOVLW  03
0166:  MOVWF  40
0167:  BCF    03.5
0168:  CALL   0D0
0169:  MOVLW  01
016A:  ADDWF  78,W
016B:  ADDLW  27
016C:  MOVWF  04
016D:  BCF    03.7
016E:  MOVF   00,W
016F:  BSF    03.5
0170:  MOVWF  3E
0171:  MOVF   3C,W
0172:  MOVWF  3F
0173:  MOVLW  03
0174:  MOVWF  40
0175:  BCF    03.5
0176:  CALL   0D0
0177:  MOVLW  01
0178:  ADDWF  78,W
0179:  ADDLW  27
017A:  MOVWF  04
017B:  BCF    03.7
017C:  MOVF   00,W
017D:  BSF    03.5
017E:  SUBWF  3E,W
017F:  BTFSS  03.2
0180:  GOTO   187
....................             Last_Stt_Task=temp;return Last_Stt_Task; 
0181:  MOVF   3C,W
0182:  BCF    03.5
0183:  MOVWF  39
0184:  MOVWF  78
0185:  GOTO   18C
0186:  BSF    03.5
....................          } 
....................       } 
0187:  INCF   3B,F
0188:  GOTO   158
0189:  BCF    03.5
....................    } 
....................    return Last_Stt_Task; 
018A:  MOVF   39,W
018B:  MOVWF  78
.................... } 
018C:  RETURN
.................... //task temp 
.................... void Call_Task_OS_Temp(void){ 
.................... } 
018D:  RETURN
....................  
.................... //------------------------------------------------------------------------------ 
.................... struct Flag1{ 
....................    unsigned char Run:1; 
....................    unsigned char Speed_Set:1; 
....................    unsigned char Rev_Set:1; 
....................    unsigned char temp:5; 
.................... }Button_Flag={0,0,0,0}; 
*
0855:  CLRF   3A
....................  
.................... //****************************************************************************** 
.................... //  Global variables 
.................... //****************************************************************************** 
.................... unsigned char const LED_MAP[11] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x79}; 
.................... struct Task_ID_Type Task_Led={1,3,1}; 
0856:  MOVWF  3B
0857:  MOVLW  03
0858:  MOVWF  3C
0859:  MOVLW  01
085A:  MOVWF  3D
.................... unsigned long Task_Led_Timer=0;// dung khi delay task_led. 16bit 
.................... struct Task_ID_Type Task_7seg={2,3,1}; 
085B:  MOVLW  02
085C:  MOVWF  40
085D:  MOVLW  03
085E:  MOVWF  41
085F:  MOVLW  01
0860:  MOVWF  42
.................... unsigned long Task_7seg_Timer=0;// dung khi delay task_Button 
.................... struct Task_ID_Type Task_Button={3,3,1}; 
0861:  MOVLW  03
0862:  MOVWF  45
0863:  MOVWF  46
0864:  MOVLW  01
0865:  MOVWF  47
.................... unsigned long Task_Button_Timer=0;// dung khi delay task_Button 
.................... struct Task_ID_Type Task_Get_Speed={4,4,1};//Counter do van toc 
0866:  MOVLW  04
0867:  MOVWF  4A
0868:  MOVWF  4B
0869:  MOVLW  01
086A:  MOVWF  4C
.................... unsigned long Task_Get_Speed_Timer=0;// dung khi delay task_get speed 
.................... //------------------------------------------------------------------------------ 
.................... unsigned char Timer0_Counter=0; 
.................... unsigned char Stage=0; 
.................... unsigned char _7seg_Buff[4]; 
.................... unsigned long RPM_Value=0;//van toc do dc 
.................... unsigned long RPM_Set=100;//van toc cai dat 
.................... unsigned long RPM_Max=520;//max speed per minute 
.................... unsigned long Rev_Gonna_Run=9999;//so vong se chay 
.................... float Pulse_Gonna_Run=0; 
.................... unsigned long Pulse_Gonna_Run_temp=0; 
.................... unsigned long Pulse_Count=0;//dem xung xem da chay duoc bao nhieu vong 
.................... unsigned long RPM_Value_temp=0; 
.................... unsigned char i=1; 
.................... //------------------------------------------------------------------------------ 
.................... float PID_MAX=1023; 
.................... float PID_MIN=0; 
.................... //****************************************************************************** 
.................... //function prototype 
.................... void Call_Task_Led(void);//nhap nhay led 
.................... void Call_Task_7seg (void);//hien thi 7seg 4digit 
.................... void Call_Task_Button (void);//quet nut bam 
.................... void Call_Task_Get_Speed (void);//Counter 
.................... void Put_Duty(unsigned int16 Process_Value,unsigned long Set_Point);//update gia tri PID vao PID value 
.................... unsigned long ADC_Read(void); 
.................... //****************************************************************************** 
.................... //****************************************************************************** 
.................... //  Interrupt routine 
.................... //****************************************************************************** 
.................... #INT_TIMER0 
.................... void Timer0_interrupt(void){ 
....................    TMR0IF=0; 
*
0050:  BCF    0B.2
....................    Timer0_Counter=1; 
0051:  MOVLW  01
0052:  MOVWF  4F
....................    if(Task_Get_Speed_Timer>0)   Task_Get_Speed_Timer--; 
0053:  MOVF   4D,F
0054:  BTFSS  03.2
0055:  GOTO   059
0056:  MOVF   4E,F
0057:  BTFSC  03.2
0058:  GOTO   05E
0059:  MOVF   4D,W
005A:  BTFSC  03.2
005B:  DECF   4E,F
005C:  DECF   4D,F
....................    else TMR1ON=0;//stop timer1; 
005D:  GOTO   05F
005E:  BCF    10.0
....................     
.................... } 
005F:  BCF    0B.2
0060:  BCF    0A.3
0061:  BCF    0A.4
0062:  GOTO   027
.................... #INT_AD 
.................... void AD_interrupt(void){ 
....................    ADIF=0; 
0063:  BCF    0C.6
....................    ADIE=0;    
0064:  BSF    03.5
0065:  BCF    0C.6
.................... } 
0066:  BCF    03.5
0067:  BCF    0C.6
0068:  BCF    0A.3
0069:  BCF    0A.4
006A:  GOTO   027
.................... #INT_TIMER2  
.................... void Timer2(void){ 
....................    TMR2IF=0;//CCP1R1L=200; 
006B:  BCF    0C.1
.................... } 
.................... //-------------------------------------------- 
.................... //****************************************************************************** 
.................... //  main 
.................... //****************************************************************************** 
006C:  BCF    0C.1
006D:  BCF    0A.3
006E:  BCF    0A.4
006F:  GOTO   027
.................... void main() 
.................... {   
*
0800:  CLRF   04
0801:  BCF    03.7
0802:  MOVLW  1F
0803:  ANDWF  03,F
0804:  CLRF   39
0805:  CLRF   3F
0806:  CLRF   3E
0807:  CLRF   44
0808:  CLRF   43
0809:  CLRF   49
080A:  CLRF   48
080B:  CLRF   4E
080C:  CLRF   4D
080D:  CLRF   4F
080E:  CLRF   50
080F:  CLRF   56
0810:  CLRF   55
0811:  CLRF   58
0812:  MOVLW  64
0813:  MOVWF  57
0814:  MOVLW  02
0815:  MOVWF  5A
0816:  MOVLW  08
0817:  MOVWF  59
0818:  MOVLW  27
0819:  MOVWF  5C
081A:  MOVLW  0F
081B:  MOVWF  5B
081C:  CLRF   60
081D:  CLRF   5F
081E:  CLRF   5E
081F:  CLRF   5D
0820:  CLRF   62
0821:  CLRF   61
0822:  CLRF   64
0823:  CLRF   63
0824:  CLRF   66
0825:  CLRF   65
0826:  MOVLW  01
0827:  MOVWF  67
0828:  CLRF   6B
0829:  MOVLW  C0
082A:  MOVWF  6A
082B:  MOVLW  7F
082C:  MOVWF  69
082D:  MOVLW  88
082E:  MOVWF  68
082F:  CLRF   6F
0830:  CLRF   6E
0831:  CLRF   6D
0832:  CLRF   6C
0833:  CLRF   7E
0834:  CLRF   7D
0835:  CLRF   7C
0836:  CLRF   7B
0837:  BSF    03.5
0838:  CLRF   23
0839:  CLRF   22
083A:  CLRF   21
083B:  CLRF   20
083C:  CLRF   2B
083D:  MOVLW  50
083E:  MOVWF  2A
083F:  MOVLW  43
0840:  MOVWF  29
0841:  MOVLW  8E
0842:  MOVWF  28
0843:  CLRF   2F
0844:  MOVLW  50
0845:  MOVWF  2E
0846:  MOVLW  C3
0847:  MOVWF  2D
0848:  MOVLW  8E
0849:  MOVWF  2C
084A:  BSF    1F.0
084B:  BSF    1F.1
084C:  BSF    1F.2
084D:  BCF    1F.3
084E:  MOVLW  07
084F:  MOVWF  1C
....................    init(); 
*
0875:  BCF    0A.3
0876:  BCF    03.5
0877:  GOTO   070
0878:  BSF    0A.3
....................    CCP_Init(); 
0879:  BCF    0A.3
087A:  CALL   08B
087B:  BSF    0A.3
....................    delay_ms(1000); 
087C:  MOVLW  04
087D:  BSF    03.5
087E:  MOVWF  3A
087F:  MOVLW  FA
0880:  MOVWF  3B
0881:  BCF    0A.3
0882:  BCF    03.5
0883:  GOTO   095
0884:  BSF    0A.3
0885:  BSF    03.5
0886:  DECFSZ 3A,F
0887:  GOTO   07F
....................    CCP_Init(); 
0888:  BCF    0A.3
0889:  BCF    03.5
088A:  CALL   08B
088B:  BSF    0A.3
....................    Timer1_Init(); 
088C:  BCF    0A.3
088D:  GOTO   0AF
088E:  BSF    0A.3
....................    //Timer2_Init(); 
....................    ADC_init(); 
088F:  BCF    0A.3
0890:  GOTO   0BB
0891:  BSF    0A.3
....................    Stage=2; 
0892:  MOVLW  02
0893:  MOVWF  50
....................     
....................    while(1){ 
....................       //quan ly cac task 
....................       if(Timer0_Counter==1){ 
0894:  DECFSZ 4F,W
0895:  GOTO   0B5
....................          Timer0_Counter=0; 
0896:  CLRF   4F
....................          if(Task_Led_Timer>0)   Task_Led_Timer--; 
0897:  MOVF   3E,F
0898:  BTFSS  03.2
0899:  GOTO   09D
089A:  MOVF   3F,F
089B:  BTFSC  03.2
089C:  GOTO   0A1
089D:  MOVF   3E,W
089E:  BTFSC  03.2
089F:  DECF   3F,F
08A0:  DECF   3E,F
....................          if(Task_7seg_Timer>0)   Task_7seg_Timer--; 
08A1:  MOVF   43,F
08A2:  BTFSS  03.2
08A3:  GOTO   0A7
08A4:  MOVF   44,F
08A5:  BTFSC  03.2
08A6:  GOTO   0AB
08A7:  MOVF   43,W
08A8:  BTFSC  03.2
08A9:  DECF   44,F
08AA:  DECF   43,F
....................          if(Task_Button_Timer>0)   Task_Button_Timer--; 
08AB:  MOVF   48,F
08AC:  BTFSS  03.2
08AD:  GOTO   0B1
08AE:  MOVF   49,F
08AF:  BTFSC  03.2
08B0:  GOTO   0B5
08B1:  MOVF   48,W
08B2:  BTFSC  03.2
08B3:  DECF   49,F
08B4:  DECF   48,F
....................          //if(Task_Get_Speed_Timer>0)   Task_Get_Speed_Timer--; 
....................       } 
....................       if(Task_Led_Timer==0)   Task_Led.Piority=3; 
08B5:  MOVF   3E,F
08B6:  BTFSS  03.2
08B7:  GOTO   0BD
08B8:  MOVF   3F,F
08B9:  BTFSS  03.2
08BA:  GOTO   0BD
08BB:  MOVLW  03
08BC:  MOVWF  3C
....................       if(Task_7seg_Timer==0)   Task_7seg.Piority=3; 
08BD:  MOVF   43,F
08BE:  BTFSS  03.2
08BF:  GOTO   0C5
08C0:  MOVF   44,F
08C1:  BTFSS  03.2
08C2:  GOTO   0C5
08C3:  MOVLW  03
08C4:  MOVWF  41
....................       if(Task_Button_Timer==0)   Task_Button.Piority=3; 
08C5:  MOVF   48,F
08C6:  BTFSS  03.2
08C7:  GOTO   0CD
08C8:  MOVF   49,F
08C9:  BTFSS  03.2
08CA:  GOTO   0CD
08CB:  MOVLW  03
08CC:  MOVWF  46
....................       if(Task_Get_Speed_Timer==0)   Task_Get_Speed.Piority=4; 
08CD:  MOVF   4D,F
08CE:  BTFSS  03.2
08CF:  GOTO   0D5
08D0:  MOVF   4E,F
08D1:  BTFSS  03.2
08D2:  GOTO   0D5
08D3:  MOVLW  04
08D4:  MOVWF  4B
....................       //select stage---------------------------------------------------------- 
....................       //stage 1: cai dat RPM_max 
....................       if(Stage==1){ 
08D5:  DECFSZ 50,W
08D6:  GOTO   1F6
....................          Task_Array[0]=Task_OS_Temp; 
08D7:  MOVF   38,W
08D8:  MOVWF  29
08D9:  MOVF   37,W
08DA:  MOVWF  28
08DB:  MOVF   36,W
08DC:  MOVWF  27
....................          Task_Array[1]=Task_Led; 
08DD:  MOVF   3D,W
08DE:  MOVWF  2C
08DF:  MOVF   3C,W
08E0:  MOVWF  2B
08E1:  MOVF   3B,W
08E2:  MOVWF  2A
....................          Task_Array[2]=Task_7seg; 
08E3:  MOVF   42,W
08E4:  MOVWF  2F
08E5:  MOVF   41,W
08E6:  MOVWF  2E
08E7:  MOVF   40,W
08E8:  MOVWF  2D
....................          Task_Array[3]=Task_Button; 
08E9:  MOVF   47,W
08EA:  MOVWF  32
08EB:  MOVF   46,W
08EC:  MOVWF  31
08ED:  MOVF   45,W
08EE:  MOVWF  30
....................          Task_Array[4]=Task_Get_Speed; 
08EF:  MOVF   4C,W
08F0:  MOVWF  35
08F1:  MOVF   4B,W
08F2:  MOVWF  34
08F3:  MOVF   4A,W
08F4:  MOVWF  33
....................          switch(select_task(5)){ 
08F5:  MOVLW  05
08F6:  BSF    03.5
08F7:  MOVWF  3A
08F8:  BCF    0A.3
08F9:  BCF    03.5
08FA:  CALL   0F7
08FB:  BSF    0A.3
08FC:  MOVF   78,W
08FD:  ADDLW  FB
08FE:  BTFSC  03.0
08FF:  GOTO   1F3
0900:  ADDLW  05
0901:  GOTO   729
....................             case 0:Call_Task_OS_Temp();break; 
0902:  BCF    0A.3
0903:  CALL   18D
0904:  BSF    0A.3
0905:  GOTO   1F3
....................             case 1:Call_Task_Led();break; 
0906:  BCF    0A.3
0907:  CALL   18E
0908:  BSF    0A.3
0909:  GOTO   1F3
....................             case 2:{ 
....................                unsigned long temp=RPM_Value_temp/i; 
090A:  MOVF   66,W
090B:  BSF    03.5
090C:  MOVWF  3D
090D:  BCF    03.5
090E:  MOVF   65,W
090F:  BSF    03.5
0910:  MOVWF  3C
0911:  CLRF   3F
0912:  BCF    03.5
0913:  MOVF   67,W
0914:  BSF    03.5
0915:  MOVWF  3E
0916:  BCF    0A.3
0917:  BCF    03.5
0918:  CALL   198
0919:  BSF    0A.3
091A:  MOVF   79,W
091B:  BSF    03.5
091C:  MOVWF  31
091D:  MOVF   78,W
091E:  MOVWF  30
....................                if(i>50) RPM_Max=temp; 
091F:  BCF    03.5
0920:  MOVF   67,W
0921:  SUBLW  32
0922:  BTFSC  03.0
0923:  GOTO   12C
0924:  BSF    03.5
0925:  MOVF   31,W
0926:  BCF    03.5
0927:  MOVWF  5A
0928:  BSF    03.5
0929:  MOVF   30,W
092A:  BCF    03.5
092B:  MOVWF  59
....................                _7seg_Buff[0] = LED_MAP[temp/1000]; 
092C:  BSF    03.5
092D:  MOVF   31,W
092E:  MOVWF  3D
092F:  MOVF   30,W
0930:  MOVWF  3C
0931:  MOVLW  03
0932:  MOVWF  3F
0933:  MOVLW  E8
0934:  MOVWF  3E
0935:  BCF    0A.3
0936:  BCF    03.5
0937:  CALL   198
0938:  BSF    0A.3
0939:  MOVF   79,W
093A:  BSF    03.5
093B:  MOVWF  3B
093C:  MOVF   78,W
093D:  MOVWF  3A
093E:  MOVF   3B,W
093F:  MOVWF  7A
0940:  MOVF   3A,W
0941:  BCF    0A.3
0942:  BCF    03.5
0943:  CALL   041
0944:  BSF    0A.3
0945:  MOVWF  78
0946:  MOVWF  51
....................                _7seg_Buff[1] = LED_MAP[(temp %1000)/100]; 
0947:  BSF    03.5
0948:  MOVF   31,W
0949:  MOVWF  3D
094A:  MOVF   30,W
094B:  MOVWF  3C
094C:  MOVLW  03
094D:  MOVWF  3F
094E:  MOVLW  E8
094F:  MOVWF  3E
0950:  BCF    0A.3
0951:  BCF    03.5
0952:  CALL   198
0953:  BSF    0A.3
0954:  MOVF   77,W
0955:  BSF    03.5
0956:  MOVWF  3A
0957:  MOVF   7A,W
0958:  MOVWF  3B
0959:  MOVWF  3D
095A:  MOVF   3A,W
095B:  MOVWF  3C
095C:  CLRF   3F
095D:  MOVLW  64
095E:  MOVWF  3E
095F:  BCF    0A.3
0960:  BCF    03.5
0961:  CALL   198
0962:  BSF    0A.3
0963:  MOVF   79,W
0964:  BSF    03.5
0965:  MOVWF  3B
0966:  MOVF   78,W
0967:  MOVWF  3A
0968:  MOVF   3B,W
0969:  MOVWF  7A
096A:  MOVF   3A,W
096B:  BCF    0A.3
096C:  BCF    03.5
096D:  CALL   041
096E:  BSF    0A.3
096F:  MOVWF  78
0970:  MOVWF  52
....................                _7seg_Buff[2] = LED_MAP[(temp % 100)/10]; 
0971:  BSF    03.5
0972:  MOVF   31,W
0973:  MOVWF  3D
0974:  MOVF   30,W
0975:  MOVWF  3C
0976:  CLRF   3F
0977:  MOVLW  64
0978:  MOVWF  3E
0979:  BCF    0A.3
097A:  BCF    03.5
097B:  CALL   198
097C:  BSF    0A.3
097D:  MOVF   77,W
097E:  BSF    03.5
097F:  MOVWF  3A
0980:  MOVF   7A,W
0981:  MOVWF  3B
0982:  MOVWF  3D
0983:  MOVF   3A,W
0984:  MOVWF  3C
0985:  CLRF   3F
0986:  MOVLW  0A
0987:  MOVWF  3E
0988:  BCF    0A.3
0989:  BCF    03.5
098A:  CALL   198
098B:  BSF    0A.3
098C:  MOVF   79,W
098D:  BSF    03.5
098E:  MOVWF  3B
098F:  MOVF   78,W
0990:  MOVWF  3A
0991:  MOVF   3B,W
0992:  MOVWF  7A
0993:  MOVF   3A,W
0994:  BCF    0A.3
0995:  BCF    03.5
0996:  CALL   041
0997:  BSF    0A.3
0998:  MOVWF  78
0999:  MOVWF  53
....................                _7seg_Buff[3] = LED_MAP[temp % 10]; 
099A:  BSF    03.5
099B:  MOVF   31,W
099C:  MOVWF  3D
099D:  MOVF   30,W
099E:  MOVWF  3C
099F:  CLRF   3F
09A0:  MOVLW  0A
09A1:  MOVWF  3E
09A2:  BCF    0A.3
09A3:  BCF    03.5
09A4:  CALL   198
09A5:  BSF    0A.3
09A6:  MOVF   77,W
09A7:  BSF    03.5
09A8:  MOVWF  3A
09A9:  MOVF   7A,W
09AA:  MOVWF  3B
09AB:  MOVWF  7A
09AC:  MOVF   3A,W
09AD:  BCF    0A.3
09AE:  BCF    03.5
09AF:  CALL   041
09B0:  BSF    0A.3
09B1:  MOVWF  78
09B2:  MOVWF  54
....................                Call_Task_7seg();break; 
09B3:  BCF    0A.3
09B4:  CALL   1BF
09B5:  BSF    0A.3
09B6:  GOTO   1F3
....................             } 
....................             case 3:{Call_Task_Button(); 
09B7:  BCF    0A.3
09B8:  CALL   1FC
09B9:  BSF    0A.3
....................                if((Button_Flag.Run==0)&&(Button_Flag.Speed_Set==1)&&(Button_Flag.Rev_Set==0)){   
09BA:  BTFSC  3A.0
09BB:  GOTO   1C3
09BC:  BTFSS  3A.1
09BD:  GOTO   1C3
09BE:  BTFSC  3A.2
09BF:  GOTO   1C3
....................                   Button_Flag.Speed_Set=0;Stage=2;//chuyen stage 
09C0:  BCF    3A.1
09C1:  MOVLW  02
09C2:  MOVWF  50
....................                } 
....................                if((Button_Flag.Run==0)&&(Button_Flag.Speed_Set==0)&&(Button_Flag.Rev_Set==1)){   
09C3:  BTFSC  3A.0
09C4:  GOTO   1CC
09C5:  BTFSC  3A.1
09C6:  GOTO   1CC
09C7:  BTFSS  3A.2
09C8:  GOTO   1CC
....................                   Button_Flag.Rev_Set=0;Stage=3; 
09C9:  BCF    3A.2
09CA:  MOVLW  03
09CB:  MOVWF  50
....................                } 
....................                if((Button_Flag.Run==1)&&(Button_Flag.Speed_Set==0)&&(Button_Flag.Rev_Set==0)){   
09CC:  BTFSS  3A.0
09CD:  GOTO   1D5
09CE:  BTFSC  3A.1
09CF:  GOTO   1D5
09D0:  BTFSC  3A.2
09D1:  GOTO   1D5
....................                   Button_Flag.Run=0;Stage=4; 
09D2:  BCF    3A.0
09D3:  MOVLW  04
09D4:  MOVWF  50
....................                } 
....................                if((Button_Flag.Run==1)&&(Button_Flag.Speed_Set==1)&&(Button_Flag.Rev_Set==0)){   
09D5:  BTFSS  3A.0
09D6:  GOTO   1DF
09D7:  BTFSS  3A.1
09D8:  GOTO   1DF
09D9:  BTFSC  3A.2
09DA:  GOTO   1DF
....................                   Button_Flag.Run=0;Button_Flag.Speed_Set=0;Stage=1; 
09DB:  BCF    3A.0
09DC:  BCF    3A.1
09DD:  MOVLW  01
09DE:  MOVWF  50
....................                } 
....................                 
....................                break; 
09DF:  GOTO   1F3
....................             } 
....................             case 4:Call_Task_Get_Speed(); 
09E0:  BCF    0A.3
09E1:  CALL   3C9
09E2:  BSF    0A.3
....................                Put_Duty(RPM_Value,850); 
09E3:  MOVF   56,W
09E4:  BSF    03.5
09E5:  MOVWF  3B
09E6:  BCF    03.5
09E7:  MOVF   55,W
09E8:  BSF    03.5
09E9:  MOVWF  3A
09EA:  MOVLW  03
09EB:  MOVWF  3D
09EC:  MOVLW  52
09ED:  MOVWF  3C
09EE:  BCF    0A.3
09EF:  BCF    03.5
09F0:  CALL   5FB
09F1:  BSF    0A.3
....................                 
....................                break; 
09F2:  GOTO   1F3
....................          } 
....................        
....................       Led_Run=0;Led_Speed_Set=0;Led_Rev_Set=0; 
09F3:  BCF    08.3
09F4:  BCF    08.2
09F5:  BCF    08.1
....................       } 
....................       //------------------------------------------------------------------------ 
....................       //hien thi toc do dat. doc adc->toc do dat 
....................       if(Stage==2){ 
09F6:  MOVF   50,W
09F7:  SUBLW  02
09F8:  BTFSS  03.2
09F9:  GOTO   34A
....................          Task_Array[0]=Task_OS_Temp; 
09FA:  MOVF   38,W
09FB:  MOVWF  29
09FC:  MOVF   37,W
09FD:  MOVWF  28
09FE:  MOVF   36,W
09FF:  MOVWF  27
....................          Task_Array[1]=Task_Led; 
0A00:  MOVF   3D,W
0A01:  MOVWF  2C
0A02:  MOVF   3C,W
0A03:  MOVWF  2B
0A04:  MOVF   3B,W
0A05:  MOVWF  2A
....................          Task_Array[2]=Task_7seg; 
0A06:  MOVF   42,W
0A07:  MOVWF  2F
0A08:  MOVF   41,W
0A09:  MOVWF  2E
0A0A:  MOVF   40,W
0A0B:  MOVWF  2D
....................          Task_Array[3]=Task_Button; 
0A0C:  MOVF   47,W
0A0D:  MOVWF  32
0A0E:  MOVF   46,W
0A0F:  MOVWF  31
0A10:  MOVF   45,W
0A11:  MOVWF  30
....................          switch(select_task(4)){ 
0A12:  MOVLW  04
0A13:  BSF    03.5
0A14:  MOVWF  3A
0A15:  BCF    0A.3
0A16:  BCF    03.5
0A17:  CALL   0F7
0A18:  BSF    0A.3
0A19:  MOVF   78,W
0A1A:  ADDLW  FC
0A1B:  BTFSC  03.0
0A1C:  GOTO   344
0A1D:  ADDLW  04
0A1E:  GOTO   732
....................             case 0:Call_Task_OS_Temp();break; 
0A1F:  BCF    0A.3
0A20:  CALL   18D
0A21:  BSF    0A.3
0A22:  GOTO   344
....................             case 1:Call_Task_Led();break; 
0A23:  BCF    0A.3
0A24:  CALL   18E
0A25:  BSF    0A.3
0A26:  GOTO   344
....................             case 2:{ 
....................                RPM_Set=ADC_Read();RPM_Set=(unsigned long)(RPM_Set/1023.0*RPM_Max); 
0A27:  BCF    0A.3
0A28:  CALL   7DA
0A29:  BSF    0A.3
0A2A:  MOVF   79,W
0A2B:  MOVWF  58
0A2C:  MOVF   78,W
0A2D:  MOVWF  57
0A2E:  MOVF   58,W
0A2F:  BSF    03.5
0A30:  MOVWF  49
0A31:  BCF    03.5
0A32:  MOVF   57,W
0A33:  BSF    03.5
0A34:  MOVWF  48
0A35:  BCF    0A.3
0A36:  BCF    03.5
0A37:  CALL   246
0A38:  BSF    0A.3
0A39:  MOVF   7A,W
0A3A:  BSF    03.5
0A3B:  MOVWF  4B
0A3C:  MOVF   79,W
0A3D:  MOVWF  4A
0A3E:  MOVF   78,W
0A3F:  MOVWF  49
0A40:  MOVF   77,W
0A41:  MOVWF  48
0A42:  CLRF   4F
0A43:  MOVLW  C0
0A44:  MOVWF  4E
0A45:  MOVLW  7F
0A46:  MOVWF  4D
0A47:  MOVLW  88
0A48:  MOVWF  4C
0A49:  BCF    0A.3
0A4A:  BCF    03.5
0A4B:  CALL   2DC
0A4C:  BSF    0A.3
0A4D:  MOVF   77,W
0A4E:  BSF    03.5
0A4F:  MOVWF  3A
0A50:  MOVF   78,W
0A51:  MOVWF  3B
0A52:  MOVF   79,W
0A53:  MOVWF  3C
0A54:  MOVF   7A,W
0A55:  MOVWF  3D
0A56:  BCF    03.5
0A57:  MOVF   5A,W
0A58:  BSF    03.5
0A59:  MOVWF  49
0A5A:  BCF    03.5
0A5B:  MOVF   59,W
0A5C:  BSF    03.5
0A5D:  MOVWF  48
0A5E:  BCF    0A.3
0A5F:  BCF    03.5
0A60:  CALL   246
0A61:  BSF    0A.3
0A62:  BSF    03.5
0A63:  MOVF   3D,W
0A64:  MOVWF  4F
0A65:  MOVF   3C,W
0A66:  MOVWF  4E
0A67:  MOVF   3B,W
0A68:  MOVWF  4D
0A69:  MOVF   3A,W
0A6A:  MOVWF  4C
0A6B:  MOVF   7A,W
0A6C:  MOVWF  53
0A6D:  MOVF   79,W
0A6E:  MOVWF  52
0A6F:  MOVF   78,W
0A70:  MOVWF  51
0A71:  MOVF   77,W
0A72:  MOVWF  50
0A73:  BCF    0A.3
0A74:  BCF    03.5
0A75:  CALL   265
0A76:  BSF    0A.3
0A77:  MOVF   7A,W
0A78:  BSF    03.5
0A79:  MOVWF  4B
0A7A:  MOVF   79,W
0A7B:  MOVWF  4A
0A7C:  MOVF   78,W
0A7D:  MOVWF  49
0A7E:  MOVF   77,W
0A7F:  MOVWF  48
0A80:  BCF    0A.3
0A81:  BCF    03.5
0A82:  CALL   3A8
0A83:  BSF    0A.3
0A84:  MOVF   79,W
0A85:  MOVWF  58
0A86:  MOVF   78,W
0A87:  MOVWF  57
....................                _7seg_Buff[0] = LED_MAP[RPM_Set/1000]; 
0A88:  MOVF   58,W
0A89:  BSF    03.5
0A8A:  MOVWF  3D
0A8B:  BCF    03.5
0A8C:  MOVF   57,W
0A8D:  BSF    03.5
0A8E:  MOVWF  3C
0A8F:  MOVLW  03
0A90:  MOVWF  3F
0A91:  MOVLW  E8
0A92:  MOVWF  3E
0A93:  BCF    0A.3
0A94:  BCF    03.5
0A95:  CALL   198
0A96:  BSF    0A.3
0A97:  MOVF   79,W
0A98:  BSF    03.5
0A99:  MOVWF  3B
0A9A:  MOVF   78,W
0A9B:  MOVWF  3A
0A9C:  MOVF   3B,W
0A9D:  MOVWF  7A
0A9E:  MOVF   3A,W
0A9F:  BCF    0A.3
0AA0:  BCF    03.5
0AA1:  CALL   041
0AA2:  BSF    0A.3
0AA3:  MOVWF  78
0AA4:  MOVWF  51
....................                _7seg_Buff[1] = LED_MAP[(RPM_Set %1000)/100]; 
0AA5:  MOVF   58,W
0AA6:  BSF    03.5
0AA7:  MOVWF  3D
0AA8:  BCF    03.5
0AA9:  MOVF   57,W
0AAA:  BSF    03.5
0AAB:  MOVWF  3C
0AAC:  MOVLW  03
0AAD:  MOVWF  3F
0AAE:  MOVLW  E8
0AAF:  MOVWF  3E
0AB0:  BCF    0A.3
0AB1:  BCF    03.5
0AB2:  CALL   198
0AB3:  BSF    0A.3
0AB4:  MOVF   77,W
0AB5:  BSF    03.5
0AB6:  MOVWF  3A
0AB7:  MOVF   7A,W
0AB8:  MOVWF  3B
0AB9:  MOVWF  3D
0ABA:  MOVF   3A,W
0ABB:  MOVWF  3C
0ABC:  CLRF   3F
0ABD:  MOVLW  64
0ABE:  MOVWF  3E
0ABF:  BCF    0A.3
0AC0:  BCF    03.5
0AC1:  CALL   198
0AC2:  BSF    0A.3
0AC3:  MOVF   79,W
0AC4:  BSF    03.5
0AC5:  MOVWF  3B
0AC6:  MOVF   78,W
0AC7:  MOVWF  3A
0AC8:  MOVF   3B,W
0AC9:  MOVWF  7A
0ACA:  MOVF   3A,W
0ACB:  BCF    0A.3
0ACC:  BCF    03.5
0ACD:  CALL   041
0ACE:  BSF    0A.3
0ACF:  MOVWF  78
0AD0:  MOVWF  52
....................                _7seg_Buff[2] = LED_MAP[(RPM_Set % 100)/10]; 
0AD1:  MOVF   58,W
0AD2:  BSF    03.5
0AD3:  MOVWF  3D
0AD4:  BCF    03.5
0AD5:  MOVF   57,W
0AD6:  BSF    03.5
0AD7:  MOVWF  3C
0AD8:  CLRF   3F
0AD9:  MOVLW  64
0ADA:  MOVWF  3E
0ADB:  BCF    0A.3
0ADC:  BCF    03.5
0ADD:  CALL   198
0ADE:  BSF    0A.3
0ADF:  MOVF   77,W
0AE0:  BSF    03.5
0AE1:  MOVWF  3A
0AE2:  MOVF   7A,W
0AE3:  MOVWF  3B
0AE4:  MOVWF  3D
0AE5:  MOVF   3A,W
0AE6:  MOVWF  3C
0AE7:  CLRF   3F
0AE8:  MOVLW  0A
0AE9:  MOVWF  3E
0AEA:  BCF    0A.3
0AEB:  BCF    03.5
0AEC:  CALL   198
0AED:  BSF    0A.3
0AEE:  MOVF   79,W
0AEF:  BSF    03.5
0AF0:  MOVWF  3B
0AF1:  MOVF   78,W
0AF2:  MOVWF  3A
0AF3:  MOVF   3B,W
0AF4:  MOVWF  7A
0AF5:  MOVF   3A,W
0AF6:  BCF    0A.3
0AF7:  BCF    03.5
0AF8:  CALL   041
0AF9:  BSF    0A.3
0AFA:  MOVWF  78
0AFB:  MOVWF  53
....................                _7seg_Buff[3] = LED_MAP[RPM_Set % 10]; 
0AFC:  MOVF   58,W
0AFD:  BSF    03.5
0AFE:  MOVWF  3D
0AFF:  BCF    03.5
0B00:  MOVF   57,W
0B01:  BSF    03.5
0B02:  MOVWF  3C
0B03:  CLRF   3F
0B04:  MOVLW  0A
0B05:  MOVWF  3E
0B06:  BCF    0A.3
0B07:  BCF    03.5
0B08:  CALL   198
0B09:  BSF    0A.3
0B0A:  MOVF   77,W
0B0B:  BSF    03.5
0B0C:  MOVWF  3A
0B0D:  MOVF   7A,W
0B0E:  MOVWF  3B
0B0F:  MOVWF  7A
0B10:  MOVF   3A,W
0B11:  BCF    0A.3
0B12:  BCF    03.5
0B13:  CALL   041
0B14:  BSF    0A.3
0B15:  MOVWF  78
0B16:  MOVWF  54
....................                Call_Task_7seg();break; 
0B17:  BCF    0A.3
0B18:  CALL   1BF
0B19:  BSF    0A.3
0B1A:  GOTO   344
....................             } 
....................             case 3:{Call_Task_Button(); 
0B1B:  BCF    0A.3
0B1C:  CALL   1FC
0B1D:  BSF    0A.3
....................                if((Button_Flag.Run==0)&&(Button_Flag.Speed_Set==1)&&(Button_Flag.Rev_Set==0)){   
0B1E:  BTFSC  3A.0
0B1F:  GOTO   327
0B20:  BTFSS  3A.1
0B21:  GOTO   327
0B22:  BTFSC  3A.2
0B23:  GOTO   327
....................                   Button_Flag.Speed_Set=0;Stage=2;//chuyen stage 
0B24:  BCF    3A.1
0B25:  MOVLW  02
0B26:  MOVWF  50
....................                } 
....................                if((Button_Flag.Run==0)&&(Button_Flag.Speed_Set==0)&&(Button_Flag.Rev_Set==1)){   
0B27:  BTFSC  3A.0
0B28:  GOTO   330
0B29:  BTFSC  3A.1
0B2A:  GOTO   330
0B2B:  BTFSS  3A.2
0B2C:  GOTO   330
....................                   Button_Flag.Rev_Set=0;Stage=3; 
0B2D:  BCF    3A.2
0B2E:  MOVLW  03
0B2F:  MOVWF  50
....................                } 
....................                if((Button_Flag.Run==1)&&(Button_Flag.Speed_Set==0)&&(Button_Flag.Rev_Set==0)){   
0B30:  BTFSS  3A.0
0B31:  GOTO   339
0B32:  BTFSC  3A.1
0B33:  GOTO   339
0B34:  BTFSC  3A.2
0B35:  GOTO   339
....................                   Button_Flag.Run=0;Stage=4; 
0B36:  BCF    3A.0
0B37:  MOVLW  04
0B38:  MOVWF  50
....................                } 
....................                if((Button_Flag.Run==1)&&(Button_Flag.Speed_Set==1)&&(Button_Flag.Rev_Set==0)){   
0B39:  BTFSS  3A.0
0B3A:  GOTO   343
0B3B:  BTFSS  3A.1
0B3C:  GOTO   343
0B3D:  BTFSC  3A.2
0B3E:  GOTO   343
....................                   Button_Flag.Run=0;Button_Flag.Speed_Set=0;Stage=1; 
0B3F:  BCF    3A.0
0B40:  BCF    3A.1
0B41:  MOVLW  01
0B42:  MOVWF  50
....................                } 
....................                break; 
0B43:  GOTO   344
....................             }           
....................          } 
....................       Disable_PWM_Modul(); 
0B44:  BCF    17.3
0B45:  BCF    17.2
0B46:  BCF    12.2
....................       Led_Speed_Set=1;Led_Rev_Set=0;Led_Run=0;//Led dat toc do sang 
0B47:  BSF    08.2
0B48:  BCF    08.1
0B49:  BCF    08.3
....................           
....................       } 
....................       //----------------------------------------------------------------------- 
....................       //stage 3: dat so vong se chay, hien thi so vong se chay 
....................       if(Stage==3){ 
0B4A:  MOVF   50,W
0B4B:  SUBLW  03
0B4C:  BTFSS  03.2
0B4D:  GOTO   496
....................          Task_Array[0]=Task_OS_Temp; 
0B4E:  MOVF   38,W
0B4F:  MOVWF  29
0B50:  MOVF   37,W
0B51:  MOVWF  28
0B52:  MOVF   36,W
0B53:  MOVWF  27
....................          Task_Array[1]=Task_Led; 
0B54:  MOVF   3D,W
0B55:  MOVWF  2C
0B56:  MOVF   3C,W
0B57:  MOVWF  2B
0B58:  MOVF   3B,W
0B59:  MOVWF  2A
....................          Task_Array[2]=Task_7seg; 
0B5A:  MOVF   42,W
0B5B:  MOVWF  2F
0B5C:  MOVF   41,W
0B5D:  MOVWF  2E
0B5E:  MOVF   40,W
0B5F:  MOVWF  2D
....................          Task_Array[3]=Task_Button; 
0B60:  MOVF   47,W
0B61:  MOVWF  32
0B62:  MOVF   46,W
0B63:  MOVWF  31
0B64:  MOVF   45,W
0B65:  MOVWF  30
....................          switch(select_task(4)){ 
0B66:  MOVLW  04
0B67:  BSF    03.5
0B68:  MOVWF  3A
0B69:  BCF    0A.3
0B6A:  BCF    03.5
0B6B:  CALL   0F7
0B6C:  BSF    0A.3
0B6D:  MOVF   78,W
0B6E:  ADDLW  FC
0B6F:  BTFSC  03.0
0B70:  GOTO   490
0B71:  ADDLW  04
0B72:  GOTO   73A
....................             case 0:Call_Task_OS_Temp();break; 
0B73:  BCF    0A.3
0B74:  CALL   18D
0B75:  BSF    0A.3
0B76:  GOTO   490
....................             case 1:Call_Task_Led();break; 
0B77:  BCF    0A.3
0B78:  CALL   18E
0B79:  BSF    0A.3
0B7A:  GOTO   490
....................             case 2:{ 
....................                Rev_Gonna_Run=ADC_Read(); 
0B7B:  BCF    0A.3
0B7C:  CALL   7DA
0B7D:  BSF    0A.3
0B7E:  MOVF   79,W
0B7F:  MOVWF  5C
0B80:  MOVF   78,W
0B81:  MOVWF  5B
....................                Rev_Gonna_Run=Rev_Gonna_Run>>2; 
0B82:  RRF    5C,F
0B83:  RRF    5B,F
0B84:  RRF    5C,F
0B85:  RRF    5B,F
0B86:  MOVLW  3F
0B87:  ANDWF  5C,F
....................                //Rev_Gonna_Run=Rev_Gonna_Run*4; 
....................                if(Rev_Gonna_Run>150) Rev_Gonna_Run=9999; 
0B88:  MOVF   5C,F
0B89:  BTFSS  03.2
0B8A:  GOTO   38F
0B8B:  MOVF   5B,W
0B8C:  SUBLW  96
0B8D:  BTFSC  03.0
0B8E:  GOTO   394
0B8F:  MOVLW  27
0B90:  MOVWF  5C
0B91:  MOVLW  0F
0B92:  MOVWF  5B
....................                else{ 
0B93:  GOTO   3D2
....................                   Pulse_Gonna_Run=Rev_Gonna_Run*131.7647; 
0B94:  MOVF   5C,W
0B95:  BSF    03.5
0B96:  MOVWF  49
0B97:  BCF    03.5
0B98:  MOVF   5B,W
0B99:  BSF    03.5
0B9A:  MOVWF  48
0B9B:  BCF    0A.3
0B9C:  BCF    03.5
0B9D:  CALL   246
0B9E:  BSF    0A.3
0B9F:  MOVF   7A,W
0BA0:  BSF    03.5
0BA1:  MOVWF  4F
0BA2:  MOVF   79,W
0BA3:  MOVWF  4E
0BA4:  MOVF   78,W
0BA5:  MOVWF  4D
0BA6:  MOVF   77,W
0BA7:  MOVWF  4C
0BA8:  MOVLW  C3
0BA9:  MOVWF  53
0BAA:  MOVWF  52
0BAB:  MOVLW  03
0BAC:  MOVWF  51
0BAD:  MOVLW  86
0BAE:  MOVWF  50
0BAF:  BCF    0A.3
0BB0:  BCF    03.5
0BB1:  CALL   265
0BB2:  BSF    0A.3
0BB3:  MOVF   7A,W
0BB4:  MOVWF  60
0BB5:  MOVF   79,W
0BB6:  MOVWF  5F
0BB7:  MOVF   78,W
0BB8:  MOVWF  5E
0BB9:  MOVF   77,W
0BBA:  MOVWF  5D
....................                   Pulse_Gonna_Run_temp=(unsigned long)Pulse_Gonna_Run; 
0BBB:  MOVF   60,W
0BBC:  BSF    03.5
0BBD:  MOVWF  4B
0BBE:  BCF    03.5
0BBF:  MOVF   5F,W
0BC0:  BSF    03.5
0BC1:  MOVWF  4A
0BC2:  BCF    03.5
0BC3:  MOVF   5E,W
0BC4:  BSF    03.5
0BC5:  MOVWF  49
0BC6:  BCF    03.5
0BC7:  MOVF   5D,W
0BC8:  BSF    03.5
0BC9:  MOVWF  48
0BCA:  BCF    0A.3
0BCB:  BCF    03.5
0BCC:  CALL   3A8
0BCD:  BSF    0A.3
0BCE:  MOVF   79,W
0BCF:  MOVWF  62
0BD0:  MOVF   78,W
0BD1:  MOVWF  61
....................                } 
....................                Pulse_Count=0; 
0BD2:  CLRF   64
0BD3:  CLRF   63
....................                _7seg_Buff[0] = LED_MAP[Rev_Gonna_Run/1000]; 
0BD4:  MOVF   5C,W
0BD5:  BSF    03.5
0BD6:  MOVWF  3D
0BD7:  BCF    03.5
0BD8:  MOVF   5B,W
0BD9:  BSF    03.5
0BDA:  MOVWF  3C
0BDB:  MOVLW  03
0BDC:  MOVWF  3F
0BDD:  MOVLW  E8
0BDE:  MOVWF  3E
0BDF:  BCF    0A.3
0BE0:  BCF    03.5
0BE1:  CALL   198
0BE2:  BSF    0A.3
0BE3:  MOVF   79,W
0BE4:  BSF    03.5
0BE5:  MOVWF  3B
0BE6:  MOVF   78,W
0BE7:  MOVWF  3A
0BE8:  MOVF   3B,W
0BE9:  MOVWF  7A
0BEA:  MOVF   3A,W
0BEB:  BCF    0A.3
0BEC:  BCF    03.5
0BED:  CALL   041
0BEE:  BSF    0A.3
0BEF:  MOVWF  78
0BF0:  MOVWF  51
....................                _7seg_Buff[1] = LED_MAP[(Rev_Gonna_Run %1000)/100]; 
0BF1:  MOVF   5C,W
0BF2:  BSF    03.5
0BF3:  MOVWF  3D
0BF4:  BCF    03.5
0BF5:  MOVF   5B,W
0BF6:  BSF    03.5
0BF7:  MOVWF  3C
0BF8:  MOVLW  03
0BF9:  MOVWF  3F
0BFA:  MOVLW  E8
0BFB:  MOVWF  3E
0BFC:  BCF    0A.3
0BFD:  BCF    03.5
0BFE:  CALL   198
0BFF:  BSF    0A.3
0C00:  MOVF   77,W
0C01:  BSF    03.5
0C02:  MOVWF  3A
0C03:  MOVF   7A,W
0C04:  MOVWF  3B
0C05:  MOVWF  3D
0C06:  MOVF   3A,W
0C07:  MOVWF  3C
0C08:  CLRF   3F
0C09:  MOVLW  64
0C0A:  MOVWF  3E
0C0B:  BCF    0A.3
0C0C:  BCF    03.5
0C0D:  CALL   198
0C0E:  BSF    0A.3
0C0F:  MOVF   79,W
0C10:  BSF    03.5
0C11:  MOVWF  3B
0C12:  MOVF   78,W
0C13:  MOVWF  3A
0C14:  MOVF   3B,W
0C15:  MOVWF  7A
0C16:  MOVF   3A,W
0C17:  BCF    0A.3
0C18:  BCF    03.5
0C19:  CALL   041
0C1A:  BSF    0A.3
0C1B:  MOVWF  78
0C1C:  MOVWF  52
....................                _7seg_Buff[2] = LED_MAP[(Rev_Gonna_Run % 100)/10]; 
0C1D:  MOVF   5C,W
0C1E:  BSF    03.5
0C1F:  MOVWF  3D
0C20:  BCF    03.5
0C21:  MOVF   5B,W
0C22:  BSF    03.5
0C23:  MOVWF  3C
0C24:  CLRF   3F
0C25:  MOVLW  64
0C26:  MOVWF  3E
0C27:  BCF    0A.3
0C28:  BCF    03.5
0C29:  CALL   198
0C2A:  BSF    0A.3
0C2B:  MOVF   77,W
0C2C:  BSF    03.5
0C2D:  MOVWF  3A
0C2E:  MOVF   7A,W
0C2F:  MOVWF  3B
0C30:  MOVWF  3D
0C31:  MOVF   3A,W
0C32:  MOVWF  3C
0C33:  CLRF   3F
0C34:  MOVLW  0A
0C35:  MOVWF  3E
0C36:  BCF    0A.3
0C37:  BCF    03.5
0C38:  CALL   198
0C39:  BSF    0A.3
0C3A:  MOVF   79,W
0C3B:  BSF    03.5
0C3C:  MOVWF  3B
0C3D:  MOVF   78,W
0C3E:  MOVWF  3A
0C3F:  MOVF   3B,W
0C40:  MOVWF  7A
0C41:  MOVF   3A,W
0C42:  BCF    0A.3
0C43:  BCF    03.5
0C44:  CALL   041
0C45:  BSF    0A.3
0C46:  MOVWF  78
0C47:  MOVWF  53
....................                _7seg_Buff[3] = LED_MAP[Rev_Gonna_Run % 10]; 
0C48:  MOVF   5C,W
0C49:  BSF    03.5
0C4A:  MOVWF  3D
0C4B:  BCF    03.5
0C4C:  MOVF   5B,W
0C4D:  BSF    03.5
0C4E:  MOVWF  3C
0C4F:  CLRF   3F
0C50:  MOVLW  0A
0C51:  MOVWF  3E
0C52:  BCF    0A.3
0C53:  BCF    03.5
0C54:  CALL   198
0C55:  BSF    0A.3
0C56:  MOVF   77,W
0C57:  BSF    03.5
0C58:  MOVWF  3A
0C59:  MOVF   7A,W
0C5A:  MOVWF  3B
0C5B:  MOVWF  7A
0C5C:  MOVF   3A,W
0C5D:  BCF    0A.3
0C5E:  BCF    03.5
0C5F:  CALL   041
0C60:  BSF    0A.3
0C61:  MOVWF  78
0C62:  MOVWF  54
....................                Call_Task_7seg();break; 
0C63:  BCF    0A.3
0C64:  CALL   1BF
0C65:  BSF    0A.3
0C66:  GOTO   490
....................             } 
....................             case 3:{Call_Task_Button(); 
0C67:  BCF    0A.3
0C68:  CALL   1FC
0C69:  BSF    0A.3
....................                if((Button_Flag.Run==0)&&(Button_Flag.Speed_Set==1)&&(Button_Flag.Rev_Set==0)){   
0C6A:  BTFSC  3A.0
0C6B:  GOTO   473
0C6C:  BTFSS  3A.1
0C6D:  GOTO   473
0C6E:  BTFSC  3A.2
0C6F:  GOTO   473
....................                   Button_Flag.Speed_Set=0;Stage=2;//chuyen stage 
0C70:  BCF    3A.1
0C71:  MOVLW  02
0C72:  MOVWF  50
....................                } 
....................                if((Button_Flag.Run==0)&&(Button_Flag.Speed_Set==0)&&(Button_Flag.Rev_Set==1)){   
0C73:  BTFSC  3A.0
0C74:  GOTO   47C
0C75:  BTFSC  3A.1
0C76:  GOTO   47C
0C77:  BTFSS  3A.2
0C78:  GOTO   47C
....................                   Button_Flag.Rev_Set=0;Stage=3; 
0C79:  BCF    3A.2
0C7A:  MOVLW  03
0C7B:  MOVWF  50
....................                } 
....................                if((Button_Flag.Run==1)&&(Button_Flag.Speed_Set==0)&&(Button_Flag.Rev_Set==0)){   
0C7C:  BTFSS  3A.0
0C7D:  GOTO   485
0C7E:  BTFSC  3A.1
0C7F:  GOTO   485
0C80:  BTFSC  3A.2
0C81:  GOTO   485
....................                   Button_Flag.Run=0;Stage=4; 
0C82:  BCF    3A.0
0C83:  MOVLW  04
0C84:  MOVWF  50
....................                } 
....................                if((Button_Flag.Run==1)&&(Button_Flag.Speed_Set==1)&&(Button_Flag.Rev_Set==0)){   
0C85:  BTFSS  3A.0
0C86:  GOTO   48F
0C87:  BTFSS  3A.1
0C88:  GOTO   48F
0C89:  BTFSC  3A.2
0C8A:  GOTO   48F
....................                   Button_Flag.Run=0;Button_Flag.Speed_Set=0;Stage=1; 
0C8B:  BCF    3A.0
0C8C:  BCF    3A.1
0C8D:  MOVLW  01
0C8E:  MOVWF  50
....................                } 
....................                break; 
0C8F:  GOTO   490
....................             }           
....................       } 
....................       Disable_PWM_Modul(); 
0C90:  BCF    17.3
0C91:  BCF    17.2
0C92:  BCF    12.2
....................       Led_Speed_Set=0;Led_Rev_Set=1;Led_Run=0;//Led dat so vong sang 
0C93:  BCF    08.2
0C94:  BSF    08.1
0C95:  BCF    08.3
....................       } 
....................       //------------------------------------------------------------------------ 
....................       //stage 4: Run hien thi toc do do dc,PWM,dem so vong con lai 
....................       if(stage==4){ 
0C96:  MOVF   50,W
0C97:  SUBLW  04
0C98:  BTFSS  03.2
0C99:  GOTO   5CD
....................          Task_Array[0]=Task_OS_Temp; 
0C9A:  MOVF   38,W
0C9B:  MOVWF  29
0C9C:  MOVF   37,W
0C9D:  MOVWF  28
0C9E:  MOVF   36,W
0C9F:  MOVWF  27
....................          Task_Array[1]=Task_Led; 
0CA0:  MOVF   3D,W
0CA1:  MOVWF  2C
0CA2:  MOVF   3C,W
0CA3:  MOVWF  2B
0CA4:  MOVF   3B,W
0CA5:  MOVWF  2A
....................          Task_Array[2]=Task_7seg; 
0CA6:  MOVF   42,W
0CA7:  MOVWF  2F
0CA8:  MOVF   41,W
0CA9:  MOVWF  2E
0CAA:  MOVF   40,W
0CAB:  MOVWF  2D
....................          Task_Array[3]=Task_Button; 
0CAC:  MOVF   47,W
0CAD:  MOVWF  32
0CAE:  MOVF   46,W
0CAF:  MOVWF  31
0CB0:  MOVF   45,W
0CB1:  MOVWF  30
....................          Task_Array[4]=Task_Get_Speed; 
0CB2:  MOVF   4C,W
0CB3:  MOVWF  35
0CB4:  MOVF   4B,W
0CB5:  MOVWF  34
0CB6:  MOVF   4A,W
0CB7:  MOVWF  33
....................          switch(select_task(5)){ 
0CB8:  MOVLW  05
0CB9:  BSF    03.5
0CBA:  MOVWF  3A
0CBB:  BCF    0A.3
0CBC:  BCF    03.5
0CBD:  CALL   0F7
0CBE:  BSF    0A.3
0CBF:  MOVF   78,W
0CC0:  ADDLW  FB
0CC1:  BTFSC  03.0
0CC2:  GOTO   5CA
0CC3:  ADDLW  05
0CC4:  GOTO   742
....................             case 0:Call_Task_OS_Temp();break; 
0CC5:  BCF    0A.3
0CC6:  CALL   18D
0CC7:  BSF    0A.3
0CC8:  GOTO   5CA
....................             case 1:Call_Task_Led();break; 
0CC9:  BCF    0A.3
0CCA:  CALL   18E
0CCB:  BSF    0A.3
0CCC:  GOTO   5CA
....................             case 2:{unsigned long temp=RPM_Value_temp/i; 
0CCD:  MOVF   66,W
0CCE:  BSF    03.5
0CCF:  MOVWF  3D
0CD0:  BCF    03.5
0CD1:  MOVF   65,W
0CD2:  BSF    03.5
0CD3:  MOVWF  3C
0CD4:  CLRF   3F
0CD5:  BCF    03.5
0CD6:  MOVF   67,W
0CD7:  BSF    03.5
0CD8:  MOVWF  3E
0CD9:  BCF    0A.3
0CDA:  BCF    03.5
0CDB:  CALL   198
0CDC:  BSF    0A.3
0CDD:  MOVF   79,W
0CDE:  BSF    03.5
0CDF:  MOVWF  33
0CE0:  MOVF   78,W
0CE1:  MOVWF  32
....................                _7seg_Buff[0] = LED_MAP[temp/1000]; 
0CE2:  MOVF   33,W
0CE3:  MOVWF  3D
0CE4:  MOVF   32,W
0CE5:  MOVWF  3C
0CE6:  MOVLW  03
0CE7:  MOVWF  3F
0CE8:  MOVLW  E8
0CE9:  MOVWF  3E
0CEA:  BCF    0A.3
0CEB:  BCF    03.5
0CEC:  CALL   198
0CED:  BSF    0A.3
0CEE:  MOVF   79,W
0CEF:  BSF    03.5
0CF0:  MOVWF  3B
0CF1:  MOVF   78,W
0CF2:  MOVWF  3A
0CF3:  MOVF   3B,W
0CF4:  MOVWF  7A
0CF5:  MOVF   3A,W
0CF6:  BCF    0A.3
0CF7:  BCF    03.5
0CF8:  CALL   041
0CF9:  BSF    0A.3
0CFA:  MOVWF  78
0CFB:  MOVWF  51
....................                _7seg_Buff[1] = LED_MAP[(temp %1000)/100]; 
0CFC:  BSF    03.5
0CFD:  MOVF   33,W
0CFE:  MOVWF  3D
0CFF:  MOVF   32,W
0D00:  MOVWF  3C
0D01:  MOVLW  03
0D02:  MOVWF  3F
0D03:  MOVLW  E8
0D04:  MOVWF  3E
0D05:  BCF    0A.3
0D06:  BCF    03.5
0D07:  CALL   198
0D08:  BSF    0A.3
0D09:  MOVF   77,W
0D0A:  BSF    03.5
0D0B:  MOVWF  3A
0D0C:  MOVF   7A,W
0D0D:  MOVWF  3B
0D0E:  MOVWF  3D
0D0F:  MOVF   3A,W
0D10:  MOVWF  3C
0D11:  CLRF   3F
0D12:  MOVLW  64
0D13:  MOVWF  3E
0D14:  BCF    0A.3
0D15:  BCF    03.5
0D16:  CALL   198
0D17:  BSF    0A.3
0D18:  MOVF   79,W
0D19:  BSF    03.5
0D1A:  MOVWF  3B
0D1B:  MOVF   78,W
0D1C:  MOVWF  3A
0D1D:  MOVF   3B,W
0D1E:  MOVWF  7A
0D1F:  MOVF   3A,W
0D20:  BCF    0A.3
0D21:  BCF    03.5
0D22:  CALL   041
0D23:  BSF    0A.3
0D24:  MOVWF  78
0D25:  MOVWF  52
....................                _7seg_Buff[2] = LED_MAP[(temp % 100)/10]; 
0D26:  BSF    03.5
0D27:  MOVF   33,W
0D28:  MOVWF  3D
0D29:  MOVF   32,W
0D2A:  MOVWF  3C
0D2B:  CLRF   3F
0D2C:  MOVLW  64
0D2D:  MOVWF  3E
0D2E:  BCF    0A.3
0D2F:  BCF    03.5
0D30:  CALL   198
0D31:  BSF    0A.3
0D32:  MOVF   77,W
0D33:  BSF    03.5
0D34:  MOVWF  3A
0D35:  MOVF   7A,W
0D36:  MOVWF  3B
0D37:  MOVWF  3D
0D38:  MOVF   3A,W
0D39:  MOVWF  3C
0D3A:  CLRF   3F
0D3B:  MOVLW  0A
0D3C:  MOVWF  3E
0D3D:  BCF    0A.3
0D3E:  BCF    03.5
0D3F:  CALL   198
0D40:  BSF    0A.3
0D41:  MOVF   79,W
0D42:  BSF    03.5
0D43:  MOVWF  3B
0D44:  MOVF   78,W
0D45:  MOVWF  3A
0D46:  MOVF   3B,W
0D47:  MOVWF  7A
0D48:  MOVF   3A,W
0D49:  BCF    0A.3
0D4A:  BCF    03.5
0D4B:  CALL   041
0D4C:  BSF    0A.3
0D4D:  MOVWF  78
0D4E:  MOVWF  53
....................                _7seg_Buff[3] = LED_MAP[temp % 10]; 
0D4F:  BSF    03.5
0D50:  MOVF   33,W
0D51:  MOVWF  3D
0D52:  MOVF   32,W
0D53:  MOVWF  3C
0D54:  CLRF   3F
0D55:  MOVLW  0A
0D56:  MOVWF  3E
0D57:  BCF    0A.3
0D58:  BCF    03.5
0D59:  CALL   198
0D5A:  BSF    0A.3
0D5B:  MOVF   77,W
0D5C:  BSF    03.5
0D5D:  MOVWF  3A
0D5E:  MOVF   7A,W
0D5F:  MOVWF  3B
0D60:  MOVWF  7A
0D61:  MOVF   3A,W
0D62:  BCF    0A.3
0D63:  BCF    03.5
0D64:  CALL   041
0D65:  BSF    0A.3
0D66:  MOVWF  78
0D67:  MOVWF  54
....................                Call_Task_7seg();break; 
0D68:  BCF    0A.3
0D69:  CALL   1BF
0D6A:  BSF    0A.3
0D6B:  GOTO   5CA
....................             } 
....................             case 3:{Call_Task_Button(); 
0D6C:  BCF    0A.3
0D6D:  CALL   1FC
0D6E:  BSF    0A.3
....................                if((Button_Flag.Run==0)&&(Button_Flag.Speed_Set==1)&&(Button_Flag.Rev_Set==0)){   
0D6F:  BTFSC  3A.0
0D70:  GOTO   578
0D71:  BTFSS  3A.1
0D72:  GOTO   578
0D73:  BTFSC  3A.2
0D74:  GOTO   578
....................                   Button_Flag.Speed_Set=0;Stage=2;//chuyen stage 
0D75:  BCF    3A.1
0D76:  MOVLW  02
0D77:  MOVWF  50
....................                } 
....................                if((Button_Flag.Run==0)&&(Button_Flag.Speed_Set==0)&&(Button_Flag.Rev_Set==1)){   
0D78:  BTFSC  3A.0
0D79:  GOTO   581
0D7A:  BTFSC  3A.1
0D7B:  GOTO   581
0D7C:  BTFSS  3A.2
0D7D:  GOTO   581
....................                   Button_Flag.Rev_Set=0;Stage=3; 
0D7E:  BCF    3A.2
0D7F:  MOVLW  03
0D80:  MOVWF  50
....................                } 
....................                if((Button_Flag.Run==1)&&(Button_Flag.Speed_Set==0)&&(Button_Flag.Rev_Set==0)){   
0D81:  BTFSS  3A.0
0D82:  GOTO   58A
0D83:  BTFSC  3A.1
0D84:  GOTO   58A
0D85:  BTFSC  3A.2
0D86:  GOTO   58A
....................                   Button_Flag.Run=0;Stage=4; 
0D87:  BCF    3A.0
0D88:  MOVLW  04
0D89:  MOVWF  50
....................                } 
....................                if((Button_Flag.Run==1)&&(Button_Flag.Speed_Set==1)&&(Button_Flag.Rev_Set==0)){   
0D8A:  BTFSS  3A.0
0D8B:  GOTO   594
0D8C:  BTFSS  3A.1
0D8D:  GOTO   594
0D8E:  BTFSC  3A.2
0D8F:  GOTO   594
....................                   Button_Flag.Run=0;Button_Flag.Speed_Set=0;Stage=1; 
0D90:  BCF    3A.0
0D91:  BCF    3A.1
0D92:  MOVLW  01
0D93:  MOVWF  50
....................                } 
....................                if((Button_Flag.Run==0)&&(Button_Flag.Speed_Set==1)&&(Button_Flag.Rev_Set==1)){   
0D94:  BTFSC  3A.0
0D95:  GOTO   59E
0D96:  BTFSS  3A.1
0D97:  GOTO   59E
0D98:  BTFSS  3A.2
0D99:  GOTO   59E
....................                   Button_Flag.Speed_Set=0;Button_Flag.Rev_Set=0;Stage=5; 
0D9A:  BCF    3A.1
0D9B:  BCF    3A.2
0D9C:  MOVLW  05
0D9D:  MOVWF  50
....................                } 
....................                break; 
0D9E:  GOTO   5CA
....................             } 
....................             case 4:{Call_Task_Get_Speed(); 
0D9F:  BCF    0A.3
0DA0:  CALL   3C9
0DA1:  BSF    0A.3
....................                   Put_Duty(RPM_Value,RPM_Set); 
0DA2:  MOVF   56,W
0DA3:  BSF    03.5
0DA4:  MOVWF  3B
0DA5:  BCF    03.5
0DA6:  MOVF   55,W
0DA7:  BSF    03.5
0DA8:  MOVWF  3A
0DA9:  BCF    03.5
0DAA:  MOVF   58,W
0DAB:  BSF    03.5
0DAC:  MOVWF  3D
0DAD:  BCF    03.5
0DAE:  MOVF   57,W
0DAF:  BSF    03.5
0DB0:  MOVWF  3C
0DB1:  BCF    0A.3
0DB2:  BCF    03.5
0DB3:  CALL   5FB
0DB4:  BSF    0A.3
....................                   if(Rev_Gonna_Run<=400){ 
0DB5:  MOVF   5C,W
0DB6:  SUBLW  01
0DB7:  BTFSS  03.0
0DB8:  GOTO   5C9
0DB9:  BTFSS  03.2
0DBA:  GOTO   5BF
0DBB:  MOVF   5B,W
0DBC:  SUBLW  90
0DBD:  BTFSS  03.0
0DBE:  GOTO   5C9
....................                      if(Pulse_Count>Pulse_Gonna_Run_temp){/*Pulse_Count=0;*/ Button_Flag.Rev_Set=1;} 
0DBF:  MOVF   62,W
0DC0:  SUBWF  64,W
0DC1:  BTFSS  03.0
0DC2:  GOTO   5C9
0DC3:  BTFSS  03.2
0DC4:  GOTO   5C8
0DC5:  MOVF   63,W
0DC6:  SUBWF  61,W
0DC7:  BTFSS  03.0
0DC8:  BSF    3A.2
....................                   } 
....................                    
....................                   break; 
0DC9:  GOTO   5CA
....................             } 
....................          } 
....................           
....................          Led_Speed_Set=0;Led_Rev_Set=0;Led_Run=1;//Led dat toc do sang 
0DCA:  BCF    08.2
0DCB:  BCF    08.1
0DCC:  BSF    08.3
....................       } 
....................       //--------------------------------------------------------------------------- 
....................      //stage 5: show adc 
....................      if(Stage==5){ 
0DCD:  MOVF   50,W
0DCE:  SUBLW  05
0DCF:  BTFSS  03.2
0DD0:  GOTO   727
....................          Task_Array[0]=Task_OS_Temp; 
0DD1:  MOVF   38,W
0DD2:  MOVWF  29
0DD3:  MOVF   37,W
0DD4:  MOVWF  28
0DD5:  MOVF   36,W
0DD6:  MOVWF  27
....................          Task_Array[1]=Task_Led; 
0DD7:  MOVF   3D,W
0DD8:  MOVWF  2C
0DD9:  MOVF   3C,W
0DDA:  MOVWF  2B
0DDB:  MOVF   3B,W
0DDC:  MOVWF  2A
....................          Task_Array[2]=Task_7seg; 
0DDD:  MOVF   42,W
0DDE:  MOVWF  2F
0DDF:  MOVF   41,W
0DE0:  MOVWF  2E
0DE1:  MOVF   40,W
0DE2:  MOVWF  2D
....................          Task_Array[3]=Task_Button; 
0DE3:  MOVF   47,W
0DE4:  MOVWF  32
0DE5:  MOVF   46,W
0DE6:  MOVWF  31
0DE7:  MOVF   45,W
0DE8:  MOVWF  30
....................          Task_Array[4]=Task_Get_Speed; 
0DE9:  MOVF   4C,W
0DEA:  MOVWF  35
0DEB:  MOVF   4B,W
0DEC:  MOVWF  34
0DED:  MOVF   4A,W
0DEE:  MOVWF  33
....................          switch(select_task(5)){ 
0DEF:  MOVLW  05
0DF0:  BSF    03.5
0DF1:  MOVWF  3A
0DF2:  BCF    0A.3
0DF3:  BCF    03.5
0DF4:  CALL   0F7
0DF5:  BSF    0A.3
0DF6:  MOVF   78,W
0DF7:  ADDLW  FB
0DF8:  BTFSC  03.0
0DF9:  GOTO   724
0DFA:  ADDLW  05
0DFB:  GOTO   74B
....................             case 0:Call_Task_OS_Temp();break; 
0DFC:  BCF    0A.3
0DFD:  CALL   18D
0DFE:  BSF    0A.3
0DFF:  GOTO   724
....................             case 1:Call_Task_Led();break; 
0E00:  BCF    0A.3
0E01:  CALL   18E
0E02:  BSF    0A.3
0E03:  GOTO   724
....................             case 2:{ 
....................                unsigned long temp=ADC_Read(); 
0E04:  BCF    0A.3
0E05:  CALL   7DA
0E06:  BSF    0A.3
0E07:  MOVF   79,W
0E08:  BSF    03.5
0E09:  MOVWF  35
0E0A:  MOVF   78,W
0E0B:  MOVWF  34
....................                 
....................                _7seg_Buff[0] = LED_MAP[temp/1000]; 
0E0C:  MOVF   35,W
0E0D:  MOVWF  3D
0E0E:  MOVF   34,W
0E0F:  MOVWF  3C
0E10:  MOVLW  03
0E11:  MOVWF  3F
0E12:  MOVLW  E8
0E13:  MOVWF  3E
0E14:  BCF    0A.3
0E15:  BCF    03.5
0E16:  CALL   198
0E17:  BSF    0A.3
0E18:  MOVF   79,W
0E19:  BSF    03.5
0E1A:  MOVWF  3B
0E1B:  MOVF   78,W
0E1C:  MOVWF  3A
0E1D:  MOVF   3B,W
0E1E:  MOVWF  7A
0E1F:  MOVF   3A,W
0E20:  BCF    0A.3
0E21:  BCF    03.5
0E22:  CALL   041
0E23:  BSF    0A.3
0E24:  MOVWF  78
0E25:  MOVWF  51
....................                _7seg_Buff[1] = LED_MAP[(temp %1000)/100]; 
0E26:  BSF    03.5
0E27:  MOVF   35,W
0E28:  MOVWF  3D
0E29:  MOVF   34,W
0E2A:  MOVWF  3C
0E2B:  MOVLW  03
0E2C:  MOVWF  3F
0E2D:  MOVLW  E8
0E2E:  MOVWF  3E
0E2F:  BCF    0A.3
0E30:  BCF    03.5
0E31:  CALL   198
0E32:  BSF    0A.3
0E33:  MOVF   77,W
0E34:  BSF    03.5
0E35:  MOVWF  3A
0E36:  MOVF   7A,W
0E37:  MOVWF  3B
0E38:  MOVWF  3D
0E39:  MOVF   3A,W
0E3A:  MOVWF  3C
0E3B:  CLRF   3F
0E3C:  MOVLW  64
0E3D:  MOVWF  3E
0E3E:  BCF    0A.3
0E3F:  BCF    03.5
0E40:  CALL   198
0E41:  BSF    0A.3
0E42:  MOVF   79,W
0E43:  BSF    03.5
0E44:  MOVWF  3B
0E45:  MOVF   78,W
0E46:  MOVWF  3A
0E47:  MOVF   3B,W
0E48:  MOVWF  7A
0E49:  MOVF   3A,W
0E4A:  BCF    0A.3
0E4B:  BCF    03.5
0E4C:  CALL   041
0E4D:  BSF    0A.3
0E4E:  MOVWF  78
0E4F:  MOVWF  52
....................                _7seg_Buff[2] = LED_MAP[(temp % 100)/10]; 
0E50:  BSF    03.5
0E51:  MOVF   35,W
0E52:  MOVWF  3D
0E53:  MOVF   34,W
0E54:  MOVWF  3C
0E55:  CLRF   3F
0E56:  MOVLW  64
0E57:  MOVWF  3E
0E58:  BCF    0A.3
0E59:  BCF    03.5
0E5A:  CALL   198
0E5B:  BSF    0A.3
0E5C:  MOVF   77,W
0E5D:  BSF    03.5
0E5E:  MOVWF  3A
0E5F:  MOVF   7A,W
0E60:  MOVWF  3B
0E61:  MOVWF  3D
0E62:  MOVF   3A,W
0E63:  MOVWF  3C
0E64:  CLRF   3F
0E65:  MOVLW  0A
0E66:  MOVWF  3E
0E67:  BCF    0A.3
0E68:  BCF    03.5
0E69:  CALL   198
0E6A:  BSF    0A.3
0E6B:  MOVF   79,W
0E6C:  BSF    03.5
0E6D:  MOVWF  3B
0E6E:  MOVF   78,W
0E6F:  MOVWF  3A
0E70:  MOVF   3B,W
0E71:  MOVWF  7A
0E72:  MOVF   3A,W
0E73:  BCF    0A.3
0E74:  BCF    03.5
0E75:  CALL   041
0E76:  BSF    0A.3
0E77:  MOVWF  78
0E78:  MOVWF  53
....................                _7seg_Buff[3] = LED_MAP[temp % 10]; 
0E79:  BSF    03.5
0E7A:  MOVF   35,W
0E7B:  MOVWF  3D
0E7C:  MOVF   34,W
0E7D:  MOVWF  3C
0E7E:  CLRF   3F
0E7F:  MOVLW  0A
0E80:  MOVWF  3E
0E81:  BCF    0A.3
0E82:  BCF    03.5
0E83:  CALL   198
0E84:  BSF    0A.3
0E85:  MOVF   77,W
0E86:  BSF    03.5
0E87:  MOVWF  3A
0E88:  MOVF   7A,W
0E89:  MOVWF  3B
0E8A:  MOVWF  7A
0E8B:  MOVF   3A,W
0E8C:  BCF    0A.3
0E8D:  BCF    03.5
0E8E:  CALL   041
0E8F:  BSF    0A.3
0E90:  MOVWF  78
0E91:  MOVWF  54
....................                Call_Task_7seg();break; 
0E92:  BCF    0A.3
0E93:  CALL   1BF
0E94:  BSF    0A.3
0E95:  GOTO   724
....................             } 
....................             case 3:{Call_Task_Button(); 
0E96:  BCF    0A.3
0E97:  CALL   1FC
0E98:  BSF    0A.3
....................                if((Button_Flag.Run==0)&&(Button_Flag.Speed_Set==1)&&(Button_Flag.Rev_Set==0)){   
0E99:  BTFSC  3A.0
0E9A:  GOTO   6A2
0E9B:  BTFSS  3A.1
0E9C:  GOTO   6A2
0E9D:  BTFSC  3A.2
0E9E:  GOTO   6A2
....................                   Button_Flag.Speed_Set=0;Stage=2;//chuyen stage 
0E9F:  BCF    3A.1
0EA0:  MOVLW  02
0EA1:  MOVWF  50
....................                } 
....................                if((Button_Flag.Run==0)&&(Button_Flag.Speed_Set==0)&&(Button_Flag.Rev_Set==1)){   
0EA2:  BTFSC  3A.0
0EA3:  GOTO   6AB
0EA4:  BTFSC  3A.1
0EA5:  GOTO   6AB
0EA6:  BTFSS  3A.2
0EA7:  GOTO   6AB
....................                   Button_Flag.Rev_Set=0;Stage=3; 
0EA8:  BCF    3A.2
0EA9:  MOVLW  03
0EAA:  MOVWF  50
....................                } 
....................                if((Button_Flag.Run==1)&&(Button_Flag.Speed_Set==0)&&(Button_Flag.Rev_Set==0)){   
0EAB:  BTFSS  3A.0
0EAC:  GOTO   6B4
0EAD:  BTFSC  3A.1
0EAE:  GOTO   6B4
0EAF:  BTFSC  3A.2
0EB0:  GOTO   6B4
....................                   Button_Flag.Run=0;Stage=4; 
0EB1:  BCF    3A.0
0EB2:  MOVLW  04
0EB3:  MOVWF  50
....................                } 
....................                if((Button_Flag.Run==1)&&(Button_Flag.Speed_Set==1)&&(Button_Flag.Rev_Set==0)){   
0EB4:  BTFSS  3A.0
0EB5:  GOTO   6BE
0EB6:  BTFSS  3A.1
0EB7:  GOTO   6BE
0EB8:  BTFSC  3A.2
0EB9:  GOTO   6BE
....................                   Button_Flag.Run=0;Button_Flag.Speed_Set=0;Stage=1; 
0EBA:  BCF    3A.0
0EBB:  BCF    3A.1
0EBC:  MOVLW  01
0EBD:  MOVWF  50
....................                } 
....................                break; 
0EBE:  GOTO   724
....................             } 
....................             case 4:{Call_Task_Get_Speed(); 
0EBF:  BCF    0A.3
0EC0:  CALL   3C9
0EC1:  BSF    0A.3
....................                   Put_Duty(RPM_Value,RPM_Set); 
0EC2:  MOVF   56,W
0EC3:  BSF    03.5
0EC4:  MOVWF  3B
0EC5:  BCF    03.5
0EC6:  MOVF   55,W
0EC7:  BSF    03.5
0EC8:  MOVWF  3A
0EC9:  BCF    03.5
0ECA:  MOVF   58,W
0ECB:  BSF    03.5
0ECC:  MOVWF  3D
0ECD:  BCF    03.5
0ECE:  MOVF   57,W
0ECF:  BSF    03.5
0ED0:  MOVWF  3C
0ED1:  BCF    0A.3
0ED2:  BCF    03.5
0ED3:  CALL   5FB
0ED4:  BSF    0A.3
....................                   if(Rev_Gonna_Run<=400){ 
0ED5:  MOVF   5C,W
0ED6:  SUBLW  01
0ED7:  BTFSS  03.0
0ED8:  GOTO   723
0ED9:  BTFSS  03.2
0EDA:  GOTO   6DF
0EDB:  MOVF   5B,W
0EDC:  SUBLW  90
0EDD:  BTFSS  03.0
0EDE:  GOTO   723
....................                      float temp=Rev_Gonna_Run*131.7647; 
0EDF:  MOVF   5C,W
0EE0:  BSF    03.5
0EE1:  MOVWF  49
0EE2:  BCF    03.5
0EE3:  MOVF   5B,W
0EE4:  BSF    03.5
0EE5:  MOVWF  48
0EE6:  BCF    0A.3
0EE7:  BCF    03.5
0EE8:  CALL   246
0EE9:  BSF    0A.3
0EEA:  MOVF   7A,W
0EEB:  BSF    03.5
0EEC:  MOVWF  4F
0EED:  MOVF   79,W
0EEE:  MOVWF  4E
0EEF:  MOVF   78,W
0EF0:  MOVWF  4D
0EF1:  MOVF   77,W
0EF2:  MOVWF  4C
0EF3:  MOVLW  C3
0EF4:  MOVWF  53
0EF5:  MOVWF  52
0EF6:  MOVLW  03
0EF7:  MOVWF  51
0EF8:  MOVLW  86
0EF9:  MOVWF  50
0EFA:  BCF    0A.3
0EFB:  BCF    03.5
0EFC:  CALL   265
0EFD:  BSF    0A.3
0EFE:  MOVF   7A,W
0EFF:  BSF    03.5
0F00:  MOVWF  39
0F01:  MOVF   79,W
0F02:  MOVWF  38
0F03:  MOVF   78,W
0F04:  MOVWF  37
0F05:  MOVF   77,W
0F06:  MOVWF  36
....................                      if(Pulse_Count>(unsigned long)temp){Pulse_Count=0; stage=2;} 
0F07:  MOVF   39,W
0F08:  MOVWF  4B
0F09:  MOVF   38,W
0F0A:  MOVWF  4A
0F0B:  MOVF   37,W
0F0C:  MOVWF  49
0F0D:  MOVF   36,W
0F0E:  MOVWF  48
0F0F:  BCF    0A.3
0F10:  BCF    03.5
0F11:  CALL   3A8
0F12:  BSF    0A.3
0F13:  MOVF   79,W
0F14:  MOVWF  7A
0F15:  MOVF   79,W
0F16:  SUBWF  64,W
0F17:  BTFSS  03.0
0F18:  GOTO   723
0F19:  BTFSS  03.2
0F1A:  GOTO   71F
0F1B:  MOVF   63,W
0F1C:  SUBWF  78,W
0F1D:  BTFSC  03.0
0F1E:  GOTO   723
0F1F:  CLRF   64
0F20:  CLRF   63
0F21:  MOVLW  02
0F22:  MOVWF  50
....................                   } 
....................                   break; 
0F23:  GOTO   724
....................             } 
....................          } 
....................        
....................       Led_Run=1;Led_Speed_Set=1;Led_Rev_Set=0; 
0F24:  BSF    08.3
0F25:  BSF    08.2
0F26:  BCF    08.1
....................       } 
....................       //------------------------------------------------------------------------ 
....................        
....................     
....................     
....................    } 
0F27:  GOTO   094
.................... } 
.................... //****************************************************************************** 
.................... //  Tasks 
.................... //****************************************************************************** 
.................... /*Task 1:nhap nhay led*/ 
.................... void Call_Task_Led (void) 
.................... {  //static unsigned char Count_Line=0; 
0F28:  SLEEP
....................      
....................     for (;;) 
....................     {    
....................         Led=~Led; 
*
018E:  MOVLW  10
018F:  XORWF  05,F
....................         Task_Led_Timer=500;Task_Led.Piority=0; 
0190:  MOVLW  01
0191:  MOVWF  3F
0192:  MOVLW  F4
0193:  MOVWF  3E
0194:  CLRF   3C
....................         break; 
0195:  GOTO   197
....................     } 
0196:  GOTO   18E
.................... } 
0197:  RETURN
.................... /*Task 2:Hien thi 7seg*/ 
.................... void Call_Task_7seg (void){ 
....................    //step 1 la hien thi ky tu so 1 
....................    for(;;){ 
....................       digit1=0;digit2=0;digit3=0;digit4=0; 
*
01BF:  BCF    08.7
01C0:  BCF    08.6
01C1:  BCF    08.5
01C2:  BCF    08.4
....................       if(Task_7seg.Step<=1){ 
01C3:  MOVF   42,W
01C4:  SUBLW  01
01C5:  BTFSS  03.0
01C6:  GOTO   1D1
....................          PORTB=_7seg_Buff[0];digit1=1; 
01C7:  MOVF   51,W
01C8:  MOVWF  06
01C9:  BSF    08.7
....................          Task_7seg_Timer=1; 
01CA:  CLRF   44
01CB:  MOVLW  01
01CC:  MOVWF  43
....................          Task_7seg.Step=2;Task_7seg.Piority=0;break; 
01CD:  MOVLW  02
01CE:  MOVWF  42
01CF:  CLRF   41
01D0:  GOTO   1FB
....................       } 
....................       if(Task_7seg.Step==2){ 
01D1:  MOVF   42,W
01D2:  SUBLW  02
01D3:  BTFSS  03.2
01D4:  GOTO   1DF
....................          PORTB=_7seg_Buff[1];digit2=1; 
01D5:  MOVF   52,W
01D6:  MOVWF  06
01D7:  BSF    08.6
....................          Task_7seg_Timer=1; 
01D8:  CLRF   44
01D9:  MOVLW  01
01DA:  MOVWF  43
....................          Task_7seg.Step=3;Task_7seg.Piority=0;break; 
01DB:  MOVLW  03
01DC:  MOVWF  42
01DD:  CLRF   41
01DE:  GOTO   1FB
....................       } 
....................       if(Task_7seg.Step==3){ 
01DF:  MOVF   42,W
01E0:  SUBLW  03
01E1:  BTFSS  03.2
01E2:  GOTO   1ED
....................          PORTB=_7seg_Buff[2];digit3=1; 
01E3:  MOVF   53,W
01E4:  MOVWF  06
01E5:  BSF    08.5
....................          Task_7seg_Timer=1; 
01E6:  CLRF   44
01E7:  MOVLW  01
01E8:  MOVWF  43
....................          Task_7seg.Step=4;Task_7seg.Piority=0;break; 
01E9:  MOVLW  04
01EA:  MOVWF  42
01EB:  CLRF   41
01EC:  GOTO   1FB
....................       } 
....................       if(Task_7seg.Step>=4){ 
01ED:  MOVF   42,W
01EE:  SUBLW  03
01EF:  BTFSC  03.0
01F0:  GOTO   1FA
....................          PORTB=_7seg_Buff[3];digit4=1; 
01F1:  MOVF   54,W
01F2:  MOVWF  06
01F3:  BSF    08.4
....................          Task_7seg_Timer=1; 
01F4:  CLRF   44
01F5:  MOVLW  01
01F6:  MOVWF  43
....................          Task_7seg.Step=1;Task_7seg.Piority=0;break; 
01F7:  MOVWF  42
01F8:  CLRF   41
01F9:  GOTO   1FB
....................       } 
....................    } 
01FA:  GOTO   1BF
....................  
.................... } 
01FB:  RETURN
.................... /*Task 3: Quet Button 
....................    nut nao dc bam thi set flag cua button do =1 
.................... */ 
.................... void Call_Task_Button (void){ 
....................    static struct Flag1 temp; 
*
086B:  CLRF   70
....................    for(;;){ 
....................       if(Task_Button.Step==1){ 
*
01FC:  DECFSZ 47,W
01FD:  GOTO   211
....................          if((RA1==1)||(RA2==1)||(RA3==1)){ 
01FE:  BTFSC  05.1
01FF:  GOTO   204
0200:  BTFSC  05.2
0201:  GOTO   204
0202:  BTFSS  05.3
0203:  GOTO   20C
....................             Task_Button_Timer=20; 
0204:  CLRF   49
0205:  MOVLW  14
0206:  MOVWF  48
....................             Task_Button.Step=2;Task_Button.Piority=0;break;//step 2 la khi nguoi su dung giu button 
0207:  MOVLW  02
0208:  MOVWF  47
0209:  CLRF   46
020A:  GOTO   245
....................          }else{ 
020B:  GOTO   211
....................             Task_Button_Timer=1; 
020C:  CLRF   49
020D:  MOVLW  01
020E:  MOVWF  48
....................             Task_Button.Piority=0;break;  
020F:  CLRF   46
0210:  GOTO   245
....................          } 
....................       } 
....................       if(Task_Button.Step==2){ 
0211:  MOVF   47,W
0212:  SUBLW  02
0213:  BTFSS  03.2
0214:  GOTO   22E
....................          if(RA1==1) temp.Run=1; 
0215:  BTFSC  05.1
0216:  BSF    70.0
....................          if(RA2==1) temp.Speed_Set=1; 
0217:  BTFSC  05.2
0218:  BSF    70.1
....................          if(RA3==1) temp.Rev_Set=1; 
0219:  BTFSC  05.3
021A:  BSF    70.2
....................          if((RA1==0)&&(RA2==0)&&(RA3==0)){//neu ko giu nut bam nua thi sang step3 la khi nguoi su dung nha nut bam 
021B:  BTFSC  05.1
021C:  GOTO   229
021D:  BTFSC  05.2
021E:  GOTO   229
021F:  BTFSC  05.3
0220:  GOTO   229
....................             Task_Button_Timer=20; 
0221:  CLRF   49
0222:  MOVLW  14
0223:  MOVWF  48
....................             Task_Button.Step=3;Task_Button.Piority=0;break; 
0224:  MOVLW  03
0225:  MOVWF  47
0226:  CLRF   46
0227:  GOTO   245
....................          }else{ 
0228:  GOTO   22E
....................             Task_Button_Timer=1;//delay 1tick 
0229:  CLRF   49
022A:  MOVLW  01
022B:  MOVWF  48
....................             Task_Button.Piority=0;break; 
022C:  CLRF   46
022D:  GOTO   245
....................          } 
....................       } 
....................       if(Task_Button.Step==3){ 
022E:  MOVF   47,W
022F:  SUBLW  03
0230:  BTFSS  03.2
0231:  GOTO   244
....................          //reset co tam, set flag 
....................          if(temp.Run==1){  Button_Flag.Run=1;temp.Run=0;} 
0232:  BTFSS  70.0
0233:  GOTO   236
0234:  BSF    3A.0
0235:  BCF    70.0
....................          if(temp.Speed_Set==1){ Button_Flag.Speed_Set=1;temp.Speed_Set=0;} 
0236:  BTFSS  70.1
0237:  GOTO   23A
0238:  BSF    3A.1
0239:  BCF    70.1
....................          if(temp.Rev_Set==1){Button_Flag.Rev_Set=1;temp.Rev_Set=0;} 
023A:  BTFSS  70.2
023B:  GOTO   23E
023C:  BSF    3A.2
023D:  BCF    70.2
....................          //quay lai step 1 
....................          Task_Button_Timer=1;//delay 1tick 
023E:  CLRF   49
023F:  MOVLW  01
0240:  MOVWF  48
....................          Task_Button.Step=1;Task_Button.Piority=0;break; 
0241:  MOVWF  47
0242:  CLRF   46
0243:  GOTO   245
....................       } 
....................    } 
0244:  GOTO   1FC
.................... } 
0245:  RETURN
.................... /*Task 4: Dieu khien dong co. Dung RC0(Counter), RC2(PWM). Dem xung trong 100tick=162,8ms 
....................    Neu Run==1 thi cho dieu xung PWM. Run==0 thi chi dem toc do quay 
.................... */ 
.................... void Call_Task_Get_Speed (void){ 
....................    for(;;){ 
....................       //step 1: bat dau qua trinh counter 
....................       if(Task_Get_Speed.Step==1){ 
*
03C9:  DECFSZ 4C,W
03CA:  GOTO   3D5
....................          TMR1H=0;TMR1L=0;TMR1ON=1;//run timer1; 
03CB:  CLRF   0F
03CC:  CLRF   0E
03CD:  BSF    10.0
....................          Task_Get_Speed_Timer=10; 
03CE:  CLRF   4E
03CF:  MOVLW  0A
03D0:  MOVWF  4D
....................          Task_Get_Speed.Step=2;Task_Get_Speed.Piority=0;break; 
03D1:  MOVLW  02
03D2:  MOVWF  4C
03D3:  CLRF   4B
03D4:  GOTO   473
....................       } 
....................       //step 2: doc ra gia tri Counter va tinh toan 
....................       if(Task_Get_Speed.Step==2){ 
03D5:  MOVF   4C,W
03D6:  SUBLW  02
03D7:  BTFSS  03.2
03D8:  GOTO   472
....................          TMR1ON=0;//stop timer1; 
03D9:  BCF    10.0
....................          if(Rev_Gonna_Run<=400)  Pulse_Count+=TMR1H*256+TMR1L; 
03DA:  MOVF   5C,W
03DB:  SUBLW  01
03DC:  BTFSS  03.0
03DD:  GOTO   3FA
03DE:  BTFSS  03.2
03DF:  GOTO   3E4
03E0:  MOVF   5B,W
03E1:  SUBLW  90
03E2:  BTFSS  03.0
03E3:  GOTO   3FA
03E4:  CLRF   7A
03E5:  MOVF   0F,W
03E6:  BSF    03.5
03E7:  MOVWF  3B
03E8:  CLRF   3A
03E9:  BCF    03.5
03EA:  MOVF   0E,W
03EB:  BSF    03.5
03EC:  ADDWF  3A,W
03ED:  MOVWF  78
03EE:  MOVF   3B,W
03EF:  MOVWF  7A
03F0:  BTFSC  03.0
03F1:  INCF   7A,F
03F2:  MOVF   78,W
03F3:  BCF    03.5
03F4:  ADDWF  63,F
03F5:  MOVF   7A,W
03F6:  BTFSC  03.0
03F7:  INCFSZ 7A,W
03F8:  ADDWF  64,F
....................          else Pulse_Count=0; 
03F9:  GOTO   3FC
03FA:  CLRF   64
03FB:  CLRF   63
....................          RPM_Value=(unsigned long)((TMR1H*256+TMR1L)*1.047/PPR*850);//doc toc do RPM=Count*60000/16.38*850/3500/PPR 
03FC:  CLRF   7A
03FD:  MOVF   0F,W
03FE:  BSF    03.5
03FF:  MOVWF  3B
0400:  CLRF   3A
0401:  BCF    03.5
0402:  MOVF   0E,W
0403:  BSF    03.5
0404:  ADDWF  3A,F
0405:  BTFSC  03.0
0406:  INCF   3B,F
0407:  MOVF   3B,W
0408:  MOVWF  49
0409:  MOVF   3A,W
040A:  MOVWF  48
040B:  BCF    03.5
040C:  CALL   246
040D:  MOVF   7A,W
040E:  BSF    03.5
040F:  MOVWF  4F
0410:  MOVF   79,W
0411:  MOVWF  4E
0412:  MOVF   78,W
0413:  MOVWF  4D
0414:  MOVF   77,W
0415:  MOVWF  4C
0416:  MOVLW  19
0417:  MOVWF  53
0418:  MOVLW  04
0419:  MOVWF  52
041A:  MOVLW  06
041B:  MOVWF  51
041C:  MOVLW  7F
041D:  MOVWF  50
041E:  BCF    03.5
041F:  CALL   265
0420:  MOVF   77,W
0421:  BSF    03.5
0422:  MOVWF  3A
0423:  MOVF   78,W
0424:  MOVWF  3B
0425:  MOVF   79,W
0426:  MOVWF  3C
0427:  MOVF   7A,W
0428:  MOVWF  3D
0429:  MOVWF  4B
042A:  MOVF   3C,W
042B:  MOVWF  4A
042C:  MOVF   3B,W
042D:  MOVWF  49
042E:  MOVF   3A,W
042F:  MOVWF  48
0430:  CLRF   4F
0431:  CLRF   4E
0432:  CLRF   4D
0433:  MOVLW  84
0434:  MOVWF  4C
0435:  BCF    03.5
0436:  CALL   2DC
0437:  MOVF   77,W
0438:  BSF    03.5
0439:  MOVWF  3A
043A:  MOVF   78,W
043B:  MOVWF  3B
043C:  MOVF   79,W
043D:  MOVWF  3C
043E:  MOVF   7A,W
043F:  MOVWF  3D
0440:  MOVWF  4F
0441:  MOVF   3C,W
0442:  MOVWF  4E
0443:  MOVF   3B,W
0444:  MOVWF  4D
0445:  MOVF   3A,W
0446:  MOVWF  4C
0447:  CLRF   53
0448:  MOVLW  80
0449:  MOVWF  52
044A:  MOVLW  54
044B:  MOVWF  51
044C:  MOVLW  88
044D:  MOVWF  50
044E:  BCF    03.5
044F:  CALL   265
0450:  MOVF   7A,W
0451:  BSF    03.5
0452:  MOVWF  4B
0453:  MOVF   79,W
0454:  MOVWF  4A
0455:  MOVF   78,W
0456:  MOVWF  49
0457:  MOVF   77,W
0458:  MOVWF  48
0459:  BCF    03.5
045A:  CALL   3A8
045B:  MOVF   79,W
045C:  MOVWF  56
045D:  MOVF   78,W
045E:  MOVWF  55
....................          Task_Get_Speed.Step=1; 
045F:  MOVLW  01
0460:  MOVWF  4C
....................          //hien thi gia tri trung binh cua 60 lan do 
....................          i++;RPM_Value_temp+=RPM_Value; 
0461:  INCF   67,F
0462:  MOVF   55,W
0463:  ADDWF  65,F
0464:  MOVF   56,W
0465:  BTFSC  03.0
0466:  INCFSZ 56,W
0467:  ADDWF  66,F
....................          if(i>=60){i=1;RPM_Value_temp=RPM_Value;} 
0468:  MOVF   67,W
0469:  SUBLW  3B
046A:  BTFSC  03.0
046B:  GOTO   472
046C:  MOVLW  01
046D:  MOVWF  67
046E:  MOVF   56,W
046F:  MOVWF  66
0470:  MOVF   55,W
0471:  MOVWF  65
....................       } 
....................     
....................    } 
0472:  GOTO   3C9
.................... } 
0473:  RETURN
.................... /*Tinh toan gia tri PWM su dung de bam xung PWM 
.................... */ 
.................... void Put_Duty(unsigned int16 Process_Value,unsigned long Set_Point){ 
*
05FB:  BSF    03.5
05FC:  MOVF   3B,W
05FD:  MOVWF  49
05FE:  MOVF   3A,W
05FF:  MOVWF  48
0600:  BCF    03.5
0601:  CALL   246
0602:  MOVF   7A,W
0603:  BSF    03.5
0604:  MOVWF  43
0605:  MOVF   79,W
0606:  MOVWF  42
0607:  MOVF   78,W
0608:  MOVWF  41
0609:  MOVF   77,W
060A:  MOVWF  40
060B:  MOVF   3D,W
060C:  MOVWF  49
060D:  MOVF   3C,W
060E:  MOVWF  48
060F:  BCF    03.5
0610:  CALL   246
0611:  MOVF   7A,W
0612:  BSF    03.5
0613:  MOVWF  47
0614:  MOVF   79,W
0615:  MOVWF  46
0616:  MOVF   78,W
0617:  MOVWF  45
0618:  MOVF   77,W
0619:  MOVWF  44
....................    static float Error; 
*
086C:  CLRF   71
086D:  CLRF   72
086E:  CLRF   73
086F:  CLRF   74
....................    static float Old_Error_G=0; 
....................    static float Sum_G=0; 
....................    static float Control_New; 
0870:  BSF    03.5
0871:  CLRF   24
0872:  CLRF   25
0873:  CLRF   26
0874:  CLRF   27
....................    unsigned int16 PID_Value; 
....................    float temp=(float)Process_Value; 
....................    float temp2=(float)Set_Point; 
....................    static float I_Max=50000; 
....................    static float I_Min=-50000;    
....................    Error=(float)(temp2-temp); 
*
061A:  BSF    03.1
061B:  MOVF   47,W
061C:  MOVWF  4B
061D:  MOVF   46,W
061E:  MOVWF  4A
061F:  MOVF   45,W
0620:  MOVWF  49
0621:  MOVF   44,W
0622:  MOVWF  48
0623:  MOVF   43,W
0624:  MOVWF  4F
0625:  MOVF   42,W
0626:  MOVWF  4E
0627:  MOVF   41,W
0628:  MOVWF  4D
0629:  MOVF   40,W
062A:  MOVWF  4C
062B:  BCF    03.5
062C:  CALL   474
062D:  MOVF   7A,W
062E:  MOVWF  74
062F:  MOVF   79,W
0630:  MOVWF  73
0631:  MOVF   78,W
0632:  MOVWF  72
0633:  MOVF   77,W
0634:  MOVWF  71
....................    RPM_Value=(unsigned int16)temp; 
0635:  BSF    03.5
0636:  MOVF   43,W
0637:  MOVWF  4B
0638:  MOVF   42,W
0639:  MOVWF  4A
063A:  MOVF   41,W
063B:  MOVWF  49
063C:  MOVF   40,W
063D:  MOVWF  48
063E:  BCF    03.5
063F:  CALL   3A8
0640:  MOVF   79,W
0641:  MOVWF  56
0642:  MOVF   78,W
0643:  MOVWF  55
....................    Control_New += 0.9*(Error); 
0644:  MOVLW  66
0645:  BSF    03.5
0646:  MOVWF  4F
0647:  MOVWF  4E
0648:  MOVWF  4D
0649:  MOVLW  7E
064A:  MOVWF  4C
064B:  MOVF   74,W
064C:  MOVWF  53
064D:  MOVF   73,W
064E:  MOVWF  52
064F:  MOVF   72,W
0650:  MOVWF  51
0651:  MOVF   71,W
0652:  MOVWF  50
0653:  BCF    03.5
0654:  CALL   265
0655:  BCF    03.1
0656:  BSF    03.5
0657:  MOVF   27,W
0658:  MOVWF  4B
0659:  MOVF   26,W
065A:  MOVWF  4A
065B:  MOVF   25,W
065C:  MOVWF  49
065D:  MOVF   24,W
065E:  MOVWF  48
065F:  MOVF   7A,W
0660:  MOVWF  4F
0661:  MOVF   79,W
0662:  MOVWF  4E
0663:  MOVF   78,W
0664:  MOVWF  4D
0665:  MOVF   77,W
0666:  MOVWF  4C
0667:  BCF    03.5
0668:  CALL   474
0669:  MOVF   7A,W
066A:  BSF    03.5
066B:  MOVWF  27
066C:  MOVF   79,W
066D:  MOVWF  26
066E:  MOVF   78,W
066F:  MOVWF  25
0670:  MOVF   77,W
0671:  MOVWF  24
....................    Sum_G += Error; 
0672:  BCF    03.1
0673:  MOVF   23,W
0674:  MOVWF  4B
0675:  MOVF   22,W
0676:  MOVWF  4A
0677:  MOVF   21,W
0678:  MOVWF  49
0679:  MOVF   20,W
067A:  MOVWF  48
067B:  MOVF   74,W
067C:  MOVWF  4F
067D:  MOVF   73,W
067E:  MOVWF  4E
067F:  MOVF   72,W
0680:  MOVWF  4D
0681:  MOVF   71,W
0682:  MOVWF  4C
0683:  BCF    03.5
0684:  CALL   474
0685:  MOVF   7A,W
0686:  BSF    03.5
0687:  MOVWF  23
0688:  MOVF   79,W
0689:  MOVWF  22
068A:  MOVF   78,W
068B:  MOVWF  21
068C:  MOVF   77,W
068D:  MOVWF  20
....................    Control_New += (Sum_G/50.0); 
068E:  MOVF   23,W
068F:  MOVWF  4B
0690:  MOVF   22,W
0691:  MOVWF  4A
0692:  MOVF   21,W
0693:  MOVWF  49
0694:  MOVF   20,W
0695:  MOVWF  48
0696:  CLRF   4F
0697:  CLRF   4E
0698:  MOVLW  48
0699:  MOVWF  4D
069A:  MOVLW  84
069B:  MOVWF  4C
069C:  BCF    03.5
069D:  CALL   2DC
069E:  BCF    03.1
069F:  BSF    03.5
06A0:  MOVF   27,W
06A1:  MOVWF  4B
06A2:  MOVF   26,W
06A3:  MOVWF  4A
06A4:  MOVF   25,W
06A5:  MOVWF  49
06A6:  MOVF   24,W
06A7:  MOVWF  48
06A8:  MOVF   7A,W
06A9:  MOVWF  4F
06AA:  MOVF   79,W
06AB:  MOVWF  4E
06AC:  MOVF   78,W
06AD:  MOVWF  4D
06AE:  MOVF   77,W
06AF:  MOVWF  4C
06B0:  BCF    03.5
06B1:  CALL   474
06B2:  MOVF   7A,W
06B3:  BSF    03.5
06B4:  MOVWF  27
06B5:  MOVF   79,W
06B6:  MOVWF  26
06B7:  MOVF   78,W
06B8:  MOVWF  25
06B9:  MOVF   77,W
06BA:  MOVWF  24
....................    Control_New += ((Error - Old_Error_G)*1.3); 
06BB:  BSF    03.1
06BC:  MOVF   74,W
06BD:  MOVWF  4B
06BE:  MOVF   73,W
06BF:  MOVWF  4A
06C0:  MOVF   72,W
06C1:  MOVWF  49
06C2:  MOVF   71,W
06C3:  MOVWF  48
06C4:  MOVF   7E,W
06C5:  MOVWF  4F
06C6:  MOVF   7D,W
06C7:  MOVWF  4E
06C8:  MOVF   7C,W
06C9:  MOVWF  4D
06CA:  MOVF   7B,W
06CB:  MOVWF  4C
06CC:  BCF    03.5
06CD:  CALL   474
06CE:  MOVF   77,W
06CF:  BSF    03.5
06D0:  MOVWF  48
06D1:  MOVF   78,W
06D2:  MOVWF  49
06D3:  MOVF   79,W
06D4:  MOVWF  4A
06D5:  MOVF   7A,W
06D6:  MOVWF  4B
06D7:  MOVWF  4F
06D8:  MOVF   4A,W
06D9:  MOVWF  4E
06DA:  MOVF   49,W
06DB:  MOVWF  4D
06DC:  MOVF   48,W
06DD:  MOVWF  4C
06DE:  MOVLW  66
06DF:  MOVWF  53
06E0:  MOVWF  52
06E1:  MOVLW  26
06E2:  MOVWF  51
06E3:  MOVLW  7F
06E4:  MOVWF  50
06E5:  BCF    03.5
06E6:  CALL   265
06E7:  BCF    03.1
06E8:  BSF    03.5
06E9:  MOVF   27,W
06EA:  MOVWF  4B
06EB:  MOVF   26,W
06EC:  MOVWF  4A
06ED:  MOVF   25,W
06EE:  MOVWF  49
06EF:  MOVF   24,W
06F0:  MOVWF  48
06F1:  MOVF   7A,W
06F2:  MOVWF  4F
06F3:  MOVF   79,W
06F4:  MOVWF  4E
06F5:  MOVF   78,W
06F6:  MOVWF  4D
06F7:  MOVF   77,W
06F8:  MOVWF  4C
06F9:  BCF    03.5
06FA:  CALL   474
06FB:  MOVF   7A,W
06FC:  BSF    03.5
06FD:  MOVWF  27
06FE:  MOVF   79,W
06FF:  MOVWF  26
0700:  MOVF   78,W
0701:  MOVWF  25
0702:  MOVF   77,W
0703:  MOVWF  24
....................    if(Sum_G>I_MAX) Sum_G=I_Max; 
0704:  MOVF   2B,W
0705:  MOVWF  4B
0706:  MOVF   2A,W
0707:  MOVWF  4A
0708:  MOVF   29,W
0709:  MOVWF  49
070A:  MOVF   28,W
070B:  MOVWF  48
070C:  MOVF   23,W
070D:  MOVWF  4F
070E:  MOVF   22,W
070F:  MOVWF  4E
0710:  MOVF   21,W
0711:  MOVWF  4D
0712:  MOVF   20,W
0713:  MOVWF  4C
0714:  BCF    03.5
0715:  CALL   5BA
0716:  BTFSS  03.0
0717:  GOTO   723
0718:  BSF    03.5
0719:  MOVF   2B,W
071A:  MOVWF  23
071B:  MOVF   2A,W
071C:  MOVWF  22
071D:  MOVF   29,W
071E:  MOVWF  21
071F:  MOVF   28,W
0720:  MOVWF  20
....................    else if(Sum_G<I_MIN) Sum_G=I_Min; 
0721:  GOTO   741
0722:  BCF    03.5
0723:  BSF    03.5
0724:  MOVF   23,W
0725:  MOVWF  4B
0726:  MOVF   22,W
0727:  MOVWF  4A
0728:  MOVF   21,W
0729:  MOVWF  49
072A:  MOVF   20,W
072B:  MOVWF  48
072C:  MOVF   2F,W
072D:  MOVWF  4F
072E:  MOVF   2E,W
072F:  MOVWF  4E
0730:  MOVF   2D,W
0731:  MOVWF  4D
0732:  MOVF   2C,W
0733:  MOVWF  4C
0734:  BCF    03.5
0735:  CALL   5BA
0736:  BTFSS  03.0
0737:  GOTO   742
0738:  BSF    03.5
0739:  MOVF   2F,W
073A:  MOVWF  23
073B:  MOVF   2E,W
073C:  MOVWF  22
073D:  MOVF   2D,W
073E:  MOVWF  21
073F:  MOVF   2C,W
0740:  MOVWF  20
0741:  BCF    03.5
....................    if (Control_New>=PID_MAX){ 
0742:  MOVF   6B,W
0743:  BSF    03.5
0744:  MOVWF  4B
0745:  BCF    03.5
0746:  MOVF   6A,W
0747:  BSF    03.5
0748:  MOVWF  4A
0749:  BCF    03.5
074A:  MOVF   69,W
074B:  BSF    03.5
074C:  MOVWF  49
074D:  BCF    03.5
074E:  MOVF   68,W
074F:  BSF    03.5
0750:  MOVWF  48
0751:  MOVF   27,W
0752:  MOVWF  4F
0753:  MOVF   26,W
0754:  MOVWF  4E
0755:  MOVF   25,W
0756:  MOVWF  4D
0757:  MOVF   24,W
0758:  MOVWF  4C
0759:  BCF    03.5
075A:  CALL   5BA
075B:  BTFSC  03.0
075C:  GOTO   75F
075D:  BTFSS  03.2
075E:  GOTO   770
....................       Control_New = PID_MAX; 
075F:  MOVF   6B,W
0760:  BSF    03.5
0761:  MOVWF  27
0762:  BCF    03.5
0763:  MOVF   6A,W
0764:  BSF    03.5
0765:  MOVWF  26
0766:  BCF    03.5
0767:  MOVF   69,W
0768:  BSF    03.5
0769:  MOVWF  25
076A:  BCF    03.5
076B:  MOVF   68,W
076C:  BSF    03.5
076D:  MOVWF  24
....................    } 
....................    else{ 
076E:  GOTO   79E
076F:  BCF    03.5
....................       if(Control_New<=PID_MIN){ 
0770:  BSF    03.5
0771:  MOVF   27,W
0772:  MOVWF  4B
0773:  MOVF   26,W
0774:  MOVWF  4A
0775:  MOVF   25,W
0776:  MOVWF  49
0777:  MOVF   24,W
0778:  MOVWF  48
0779:  BCF    03.5
077A:  MOVF   6F,W
077B:  BSF    03.5
077C:  MOVWF  4F
077D:  BCF    03.5
077E:  MOVF   6E,W
077F:  BSF    03.5
0780:  MOVWF  4E
0781:  BCF    03.5
0782:  MOVF   6D,W
0783:  BSF    03.5
0784:  MOVWF  4D
0785:  BCF    03.5
0786:  MOVF   6C,W
0787:  BSF    03.5
0788:  MOVWF  4C
0789:  BCF    03.5
078A:  CALL   5BA
078B:  BTFSC  03.0
078C:  GOTO   78F
078D:  BTFSS  03.2
078E:  GOTO   79F
....................       Control_New=PID_MIN; 
078F:  MOVF   6F,W
0790:  BSF    03.5
0791:  MOVWF  27
0792:  BCF    03.5
0793:  MOVF   6E,W
0794:  BSF    03.5
0795:  MOVWF  26
0796:  BCF    03.5
0797:  MOVF   6D,W
0798:  BSF    03.5
0799:  MOVWF  25
079A:  BCF    03.5
079B:  MOVF   6C,W
079C:  BSF    03.5
079D:  MOVWF  24
079E:  BCF    03.5
....................       } 
....................    } 
....................    Old_Error_G = Error; 
079F:  MOVF   74,W
07A0:  MOVWF  7E
07A1:  MOVF   73,W
07A2:  MOVWF  7D
07A3:  MOVF   72,W
07A4:  MOVWF  7C
07A5:  MOVF   71,W
07A6:  MOVWF  7B
....................    PID_Value=(unsigned int16)(Control_New); 
07A7:  BSF    03.5
07A8:  MOVF   27,W
07A9:  MOVWF  4B
07AA:  MOVF   26,W
07AB:  MOVWF  4A
07AC:  MOVF   25,W
07AD:  MOVWF  49
07AE:  MOVF   24,W
07AF:  MOVWF  48
07B0:  BCF    03.5
07B1:  CALL   3A8
07B2:  MOVF   79,W
07B3:  BSF    03.5
07B4:  MOVWF  3F
07B5:  MOVF   78,W
07B6:  MOVWF  3E
....................    PID_Value=1023-PID_Value; 
07B7:  MOVF   3E,W
07B8:  SUBLW  FF
07B9:  MOVWF  3E
07BA:  MOVF   3F,W
07BB:  BTFSS  03.0
07BC:  INCFSZ 3F,W
07BD:  GOTO   7C0
07BE:  MOVLW  03
07BF:  GOTO   7C1
07C0:  SUBLW  03
07C1:  MOVWF  3F
....................     
....................    //set PWM duty 
....................    //lay 2 bit thap cua PWM 
....................    //CCP1Y=PID_Value&&0x01;CCP1X=PID_Value&&0x02; 
....................    //lay 8 bit cao cua PWM 
....................    //PID_Value=PID_Value>>2;CCPR1L=PID_Value; 
....................    // CCPR1L=0x01;CCP1Y=0;CCP1X=0; 
....................    set_pwm1_duty(PID_Value); 
07C2:  MOVF   3F,W
07C3:  MOVWF  79
07C4:  MOVF   3E,W
07C5:  MOVWF  78
07C6:  RRF    79,F
07C7:  RRF    78,F
07C8:  RRF    79,F
07C9:  RRF    78,F
07CA:  RRF    79,F
07CB:  MOVF   78,W
07CC:  BCF    03.5
07CD:  MOVWF  15
07CE:  RRF    79,F
07CF:  RRF    79,W
07D0:  ANDLW  30
07D1:  MOVWF  77
07D2:  MOVF   17,W
07D3:  ANDLW  CF
07D4:  IORWF  77,W
07D5:  MOVWF  17
....................    Enable_PWM_Modul(); 
07D6:  BSF    17.3
07D7:  BSF    17.2
07D8:  BSF    12.2
.................... } 
07D9:  RETURN
.................... unsigned long ADC_Read(void){ 
....................    ADC_GO=1; 
07DA:  BSF    1F.2
....................    while(ADC_GO==1){ 
07DB:  BTFSS  1F.2
07DC:  GOTO   7F0
....................       unsigned char temp2; 
....................       unsigned char temp=0; 
07DD:  BSF    03.5
07DE:  CLRF   3B
....................       for(temp2=0;temp2<50;temp2++);//delay 10us 
07DF:  CLRF   3A
07E0:  MOVF   3A,W
07E1:  SUBLW  31
07E2:  BTFSS  03.0
07E3:  GOTO   7E6
07E4:  INCF   3A,F
07E5:  GOTO   7E0
....................       temp++; 
07E6:  INCF   3B,F
....................       if(temp>10) break;//delay toi da 100us 
07E7:  MOVF   3B,W
07E8:  SUBLW  0A
07E9:  BTFSC  03.0
07EA:  GOTO   7EE
07EB:  BCF    03.5
07EC:  GOTO   7F0
07ED:  BSF    03.5
....................    } 
07EE:  BCF    03.5
07EF:  GOTO   7DB
....................    return (ADRESH*256+ADRESL); 
07F0:  CLRF   7A
07F1:  MOVF   1E,W
07F2:  BSF    03.5
07F3:  MOVWF  3D
07F4:  CLRF   3C
07F5:  MOVF   1E,W
07F6:  ADDWF  3C,W
07F7:  MOVWF  78
07F8:  MOVF   3D,W
07F9:  MOVWF  7A
07FA:  BTFSC  03.0
07FB:  INCF   7A,F
07FC:  MOVF   7A,W
07FD:  MOVWF  79
....................        
.................... } 
07FE:  BCF    03.5
07FF:  RETURN
....................  

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
